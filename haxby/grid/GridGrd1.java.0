package haxby.grid;

import haxby.proj.*;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;

public class GridGrd1 {
	public static void main(String[] args) {
		if( args.length != 2 ) {
			System.out.println("usage: java GridGrd1 dir filenames_file");
			System.exit(0);
		}
		Mercator proj = ProjectionFactory.getMercator(1024*320);
		Mercator proj4 = ProjectionFactory.getMercator(256*320);
		String dir = args[0];
		int nLevel = 0;
		int nGrid = 1024;
		while( nGrid>8 ) {
			nLevel++;
			nGrid /= 8;
		}
		int nLevel4 = 0;
		int nGrid4 = 256;
		while( nGrid4>8 ) {
			nLevel4++;
			nGrid4 /= 8;
		}
		try {
			BufferedReader in = new BufferedReader(
				new FileReader( args[1] ));
			String s;
			while( (s=in.readLine()) != null) {
				StringTokenizer st = new StringTokenizer(s);
				File file = new File( st.nextToken() );
				boolean sign = (Integer.parseInt(st.nextToken())==-1);
				double wt = Double.parseDouble( st.nextToken() );
				boolean mercator = st.hasMoreTokens()
					&& st.nextToken().equalsIgnoreCase("M");
				XGrid grid = mercator ?
					XGrid.getGrd1M( file, sign,
						Integer.parseInt(st.nextToken()),
						Double.parseDouble(st.nextToken()))
					:
					XGrid.getGrd1(file, sign);

				float[] gridZ = grid.getGrid();
				for(int i=0 ; i<gridZ.length ; i++) {
					if( gridZ[i]==0f ) gridZ[i] = Float.NaN;
				}
				Projection gp = grid.getProjection();
				Dimension dim = grid.getSize();
		System.out.println( dim.width  +"\t"+ dim.height +"\t"+ gridZ.length );
				float[] mask = GridMask.gridDistance( gridZ, dim.width, dim.height, 10f, false);
				Point2D ul = gp.getRefXY(new Point2D.Double(0., 0.));
				Point2D lr = gp.getRefXY(new Point2D.Double(dim.getWidth()-1., 
							dim.getHeight()-1.));
				ul = proj4.getMapXY(ul);
				int x1 = (int)Math.ceil( ul.getX() );
				int y1 = (int)Math.ceil( ul.getY() );
				ul = proj4.getMapXY(lr);
				int x2 = (int)Math.ceil( ul.getX() );
				if( x2<x1 ) x2 += 320*256;
				int y2 = (int)Math.ceil( ul.getY() );
				Point p = new Point();
				Point2D.Double map;
		System.out.println( x1 +"\t"+ x2 +"\t"+ y1 +"\t"+ y2 +"\t"+ (1 + (x2/320) - (x1/320)) +" grids" );
				GridderZW gridder = new GridderZW( 320, 1 + (x2/320) - (x1/320),
						nLevel4, proj4, dir+"/merc_320_256");
				int width = grid.getWidth();
				int height = grid.getHeight();
				int test = 320*256;
				for(int y=y1 ; y<y2 ; y++){
					for(int x=x1 ; x<x2 ; x++) {
						p.y = y;
						p.x = x;
						map = (Point2D.Double)gp.getMapXY(proj4.getRefXY(p));
						double z = grid.sample(map.x, map.y);
						if(Double.isNaN(z)) continue;
						double weight = Interpolate.bicubic( mask, 
									dim.width, dim.height,
									map.x, map.y);
						if( weight<=0. )continue;
						if( weight>1. )weight=1.;
						int xx = x;
						if( xx>=test ) xx-=test;
						gridder.addPoint(xx, y, z, wt*weight);
					}
				}
				gridder.finish();
				ul = gp.getRefXY(new Point2D.Double(0., 0.));
				lr = gp.getRefXY(new Point2D.Double(dim.getWidth()-1., 
							dim.getHeight()-1.));
				ul = proj.getMapXY(ul);
				x1 = (int)Math.ceil( ul.getX() );
				y1 = (int)Math.ceil( ul.getY() );
				ul = proj.getMapXY(lr);
				x2 = (int)Math.ceil( ul.getX() );
				if( x2<x1 ) x2 += 1024*320;
				y2 = (int)Math.ceil( ul.getY() );
				p = new Point();
		System.out.println( x1 +"\t"+ x2 +"\t"+ y1 +"\t"+ y2 +"\t"+ (1 + (x2/320) - (x1/320)) +" grids" );
				gridder = new GridderZW( 320, 1 + (x2/320) - (x1/320),
						nLevel, proj, dir+"/merc_320_1024");
				width = grid.getWidth();
				height = grid.getHeight();
				test = 1024*320;
				for(int y=y1 ; y<y2 ; y++){
					for(int x=x1 ; x<x2 ; x++) {
						p.y = y;
						p.x = x;
						map = (Point2D.Double)gp.getMapXY(proj.getRefXY(p));
						double z = grid.sample(map.x, map.y);
						if(Double.isNaN(z)) continue;
						double weight = Interpolate.bicubic( mask, 
									dim.width, dim.height,
									map.x, map.y);
						if( weight<=0. )continue;
						if( weight>1. )weight=1.;
						int xx = x;
						if( xx>=test ) xx-=test;
						gridder.addPoint(xx, y, z, wt*weight);
					}
				}
				gridder.finish();
			}
		} catch (IOException ex) {
			ex.printStackTrace();
			System.exit(0);
		}
	}
}
