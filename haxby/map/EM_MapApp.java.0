package haxby.map;

import haxby.db.*;
import haxby.db.age.*;
import haxby.db.mgg.*;
import haxby.db.mcs.*;
import haxby.db.radar.*;
import haxby.db.mb.*;
import haxby.db.pdb.*;
import haxby.db.eq.*;
import haxby.db.pmel.*;
import haxby.db.shore.*;
import xb.mcs.*;
import haxby.map.*;
import haxby.proj.*;
import haxby.util.*;
import haxby.grid.*;

import javax.swing.*;
import javax.swing.event.*;
import java.awt.print.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.net.*;

public class EM_MapApp implements ActionListener, 
			KeyListener {
		//	HyperlinkListener {
	private static String VERSION = "1.0b";
	static String BASE_URL = "http://ocean-ridge.ldeo.columbia.edu/";
	int whichMap;
	XMap map = null;
	Zoomer zoomer;
	MapTools tools;
	JFrame frame;
	JFrame option = null;
	GridOverlay focus;
	MapOverlay baseMap;
	Mercator merc;
	JSplitPane hPane;
	JSplitPane vPane;
	JPanel dialog;
	JLabel dbLabel;
	JButton closeDB;	
	Database[] db=null;
	ShoreLine shoreLine = null;
	ShoreOptionPanel opShorePanel = null;
	Database currentDB = null;
	JMenuItem[] dbMI;
	JMenuBar menuBar;
	JMenu dbMenu;
	JMenu opMenu;
	JMenuItem opMI;
	JCheckBoxMenuItem colorScaleCB, mapScaleCB;
	MapColorScale colorScale = null;
	MapScale mapScale = null;
	JMenu fileMenu;
	String directory;
	XBrowser browser = null;
	boolean[] tmpSides = new boolean[4];
	JComboBox font;
	JTextField fontSize;
	JCheckBox[] side;
	Font tmpFont;
	Font defaultFont;
	boolean[] dfltSides = new boolean[4];
	boolean scroll = true;
	JCheckBox doScroll;
	
	public static JFileChooser chooser = null;
	public EM_MapApp( String dir ) {
		this( dir, null );
	}
	public EM_MapApp( String dir, String baseURL ) {
		if( baseURL != null ) {
			BASE_URL = baseURL;
			if( !BASE_URL.endsWith("/") ) BASE_URL += "/";
		}
		whichMap = 0;
		checkVersion();
		directory = dir;
		File file = new File(dir);
		if( dir.equals(".") ) file = new File( System.getProperty("user.dir") );
		BaseMapSelect sel = new BaseMapSelect();
		whichMap = sel.getBaseMap();
		if( whichMap==-1 )System.exit(0);
		if(whichMap==0) {
			MMapServer.setBaseURL("file:" + file.getPath() +"/merc_320_1024/" );
			if( baseURL != null ) {
				MGridServer.setBaseURL( BASE_URL +"/MapApp/");
				MMapServer.setAlternateURL( BASE_URL +"/MapApp/merc_320_1024/" );
			}
			MInit();
		} else {
			SPMapServerA.setBaseURL("file:" + file.getPath()+"/SP_320_50/" );
			if( baseURL != null ) {
				SPGridServer.setBaseURL( BASE_URL +"/antarctic/SP_320_50");
				SPMapServerA.setAlternateURL( BASE_URL +"/antarctic/SP_320_50/" );
			}
			SPInit();						
		}
		
		defaultFont = map.getMapBorder().getFont();
		for (int i = 0; i< 4; i++)
			dfltSides[i] = map.getMapBorder().isSideSelected(i);
	}
	public EM_MapApp( ) {				
		directory = null;
		BaseMapSelect sel = new BaseMapSelect();
		whichMap = 0;
		checkVersion();
		whichMap = sel.getBaseMap();
		if( whichMap==-1 )System.exit(0);
	//	if(whichMap==0) mercInit();
		if(whichMap==0) MInit();
		else SPInit();
		
		defaultFont = map.getMapBorder().getFont();
		for (int i = 0; i< 4; i++)
			dfltSides[i] = map.getMapBorder().isSideSelected(i);
	}
	public EM_MapApp( int which ) {
		whichMap = which;
		checkVersion();		
		if(whichMap==0) MInit();
		else SPInit();
		
		defaultFont = map.getMapBorder().getFont();
		for (int i = 0; i< 4; i++)
			dfltSides[i] = map.getMapBorder().isSideSelected(i);
	}
	private void checkVersion() {
		try {
			URL url = new URL(BASE_URL +"MapApp/version");
			BufferedReader in = new BufferedReader(
					new InputStreamReader( url.openStream() ));
			String version = in.readLine();
			if( !version.equals(VERSION) ) {
				
				boolean isUpdated = false;
				
				while (!isUpdated)
				{
					
					
					JPanel upMes = new JPanel(new BorderLayout());								
					
					JTextArea l = new JTextArea("Your version of MapApp: " + VERSION + "\n"
						+ " -- is not up to date. \n"
						+ "The new version: "+ version + "\n"
						+ "-- may now be downloaded");
					
					upMes.add(l, BorderLayout.NORTH);	
					
					JRadioButton upOK = new JRadioButton("Download.", true);
					JRadioButton upCan = new JRadioButton("Cancel", false);
					JRadioButton upIgn = new JRadioButton("Ignore", false);
					
					ButtonGroup updateG = new ButtonGroup();
					
					updateG.add(upOK);
					updateG.add(upIgn);
					updateG.add(upCan);
					
					JPanel updateP = new JPanel(new GridLayout(0,1));
					updateP.add(upOK);
					updateP.add(upIgn);
					updateP.add(upCan);
					
					upMes.add(updateP, BorderLayout.WEST);
					
					JButton upView = new JButton("View Updates");
					upView.addActionListener(this);
					upMes.add(upView, BorderLayout.EAST);
					
					JOptionPane.showMessageDialog(frame, upMes, "Update from " + VERSION + " to " + version + "?", JOptionPane.QUESTION_MESSAGE);
					
					if (upOK.isSelected())
					{
						if (update())
						{
							JOptionPane.showMessageDialog(null, "Please restart MapApp");
							System.exit(0);
						}
					}		
					else if (upIgn.isSelected())
						return;
					else if (upCan.isSelected())
						System.exit(0);
						
					/*
					JOptionPane.showMessageDialog(null, 
						"Your version of MapApp -- "+VERSION
						+ " -- is not up to date.\n"
						+ "The new version -- "+version
						+ " -- may be downloaded from:"
						+ "\nhttp://ocean-ridge.ldeo.columbia.edu/MapApp/MapApp.jar (MapApp)"
						+ "\n               or"
						+ "\nhttp://ocean-ridge.ldeo.columbia.edu/MapApp/MapAppSouth.jar (MapAppSouth)");
					*/
				}
			}
		} catch (Exception ex ) {
			ex.printStackTrace();
		}
	}
	
	private boolean update()
	{
		URL url;
		
		try
		{
			File f;
			if (whichMap == 0)
				f = new File("MapApp.jar");
			else 
				f = new File("MapAppSouth.jar");

			do 
			{
				if( chooser==null ) {
					chooser = new JFileChooser(System.getProperty("user.dir"));
				}
				chooser.setSelectedFile(f);
				int s = chooser.showSaveDialog(null);
				
				if (s == chooser.CANCEL_OPTION)
					return false;
					
				f = chooser.getSelectedFile();
				
				int c = JOptionPane.showConfirmDialog(null, "File exists, Overwrite?");
				
				if (c == JOptionPane.OK_OPTION)
					break;
				if (c == JOptionPane.CANCEL_OPTION)
					return false;				
			} while( f.exists() );
			
			if (whichMap == 0)
			{
				url = new URL(BASE_URL + "MapApp/MapApp.jar");
			}
			else
			{
				url = new URL(BASE_URL + "MapApp/MapAppSouth.jar");
			}
			
			byte[] buf = new byte[32768];
			
			JFrame dlF = new JFrame("Downloading");
			dlF.getContentPane().setLayout(new BorderLayout());
			JLabel dlL = new JLabel("Opening connection");
			dlF.getContentPane().add(dlL);
			dlF.pack();
			
			BufferedInputStream in = new BufferedInputStream( url.openStream(), 32768 );
			BufferedOutputStream out = new BufferedOutputStream( 
					new FileOutputStream( f ), 32768 );
					
			int len;						
			
			while( (len=in.read(buf)) != -1 ) 
			{
				out.write( buf, 0, len );
				dlL.setText("Downloaded: " + len);
				dlF.pack();
			}
			
			dlF.dispose();
			in.close();
			out.flush();
			out.close();
			
			return true;			
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
		}
		
		return false;
	}
	void mercInit() {
		JWindow startup = new JWindow();
		StartUp start = new StartUp();
		startup.getContentPane().add(start, "Center");
	//	startup.getContentPane().add(start.label, "North");
		Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
		startup.pack();
		Dimension win = startup.getSize();
		startup.setLocation( (screen.width-win.width)/2, (screen.height-win.height)/2 );
		startup.show();
		merc = new Mercator( 0., 0., 360, Projection.SPHERE,
				Mercator.RANGE_0_to_360);
// initialize map
		Mercator proj = new Mercator(0., 82., 1440,
				Projection.SPHERE,
				Mercator.RANGE_0_to_360);
		int width = 1440;
		int height = (int)Math.ceil(proj.getY(-79.));
		map = new XMap( this, proj, width*2, height);
		CylindricalMapBorder border = new CylindricalMapBorder(map);						
		map.setMapBorder(border);	
// create "base map" overlay, base map image
		baseMap = new MapOverlay( map );
		double[] wesn = new double[] {0., 360., -1., 1.};
		wesn = MapServerA.fitWESN( wesn, width, height );
		BufferedImage image = new BufferedImage( width, height, 
				BufferedImage.TYPE_INT_RGB);
		start.setText("Composing Basemap Image");
		MapServerA.getImage( wesn, width, height, image);
		start.setText("Composing Mask");
		BufferedImage mask = MapServerA.getMask( wesn, width, height );
		double y0 = proj.getY( merc.getLatitude(wesn[2]) );
		baseMap.setImage(image, mask, 0., y0, 1.);
		map.addOverlay(baseMap);
		start.setText("Initiallizing GUI");
		initGUI();
		startup.dispose();
		start = null;
	}
	void SPInit() {
		JWindow startup = new JWindow();
		StartUp start = new StartUp(1);
		startup.getContentPane().add(start, "Center");
	//	startup.getContentPane().add(start.label, "North");
		Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
		startup.pack();
		Dimension win = startup.getSize();
		startup.setLocation( (screen.width-win.width)/2, (screen.height-win.height)/2 );
		startup.show();
		String dir = "/scratch/ridgembs/bill/antarctic";
		PolarStereo proj = new PolarStereo( new Point(320, 320),
				180., 25600., -71., PolarStereo.SOUTH, PolarStereo.WGS84);
		int width = 640;
		int height = 640;
		map = new XMap( this, proj, width, height);
		PolarMapBorder border = new PolarMapBorder(map);
		map.setMapBorder(border);
		start.setText("Composing Basemap Image");
		baseMap = new MapOverlay( map );
		if( !SPMapServerA.getImage( new Rectangle(0,0,640,640), baseMap, 512) ) {
			System.out.println("unable to create base map");
			System.exit(0);
		}
		SPMapServerA.getMaskImage( new Rectangle(0,0,640,640), baseMap, 512);
		map.addOverlay(baseMap);		
		start.setText("Initiallizing GUI");
		initGUI();
		startup.dispose();
		start = null;
	}
	void MInit() {
		JWindow startup = new JWindow();
		StartUp start = new StartUp();
		startup.getContentPane().add(start, "Center");
	//	startup.getContentPane().add(start.label, "North");
		Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
		startup.pack();
		Dimension win = startup.getSize();
		startup.setLocation( (screen.width-win.width)/2, (screen.height-win.height)/2 );
		startup.show();
		String dir = "/scratch/ridgembs/bill/antarctic";
		Mercator proj = ProjectionFactory.getMercator( 640 );
		double lat = proj.getLatitude( -260. );
		proj = new Mercator( 0., lat, 640, Projection.SPHERE, CylindricalProjection.RANGE_0_to_360);
		int width = 1280;
		int height = 498;
		map = new XMap( this, proj, width, height);
		CylindricalMapBorder border = new CylindricalMapBorder(map);
		map.setMapBorder(border);
		start.setText("Composing Basemap Image");
		baseMap = new MapOverlay( map );
		if( !MMapServer.getImage( new Rectangle(0,0,640,498), baseMap, 512) ) {
			System.out.println("unable to create base map");
			System.exit(0);
		}
		MMapServer.getMaskImage( new Rectangle(0,0,640,498), baseMap, 512);
		map.addOverlay(baseMap);
		start.setText("Initiallizing GUI");
		initGUI();
		startup.dispose();
		start = null;
	}
	void initGUI() {
// create "focus" overlay with NULL image
		focus = new GridOverlay( map );
		map.addOverlay(focus);
		if( whichMap==1 ) {
			shoreLine = new ShoreLine( map );
			try {
				shoreLine.load( "http://ocean-ridge.ldeo.columbia.edu/antarctic/SP.shore");
				map.addOverlay( shoreLine );
			} catch( IOException ex ) {
				shoreLine=null;
				ex.printStackTrace();
			}
		}
// initialize zoomer
		zoomer = new Zoomer(map);
		map.addMouseListener(zoomer);
		map.addMouseMotionListener(zoomer);
		map.addKeyListener(zoomer);
		map.addKeyListener(this);

		tools = new MapTools(this, map, focus);

		JScrollPane sp = new JScrollPane(map);
		//	JScrollPane.VERTICAL_SCROLLBAR_NEVER,
		//	JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

		frame = new JFrame("MapApp " + VERSION);
		if( whichMap==1 ) frame.setTitle( "MapAppSouth " + VERSION);

		JPanel mainPanel = new JPanel(new BorderLayout() );
		mainPanel.add(tools.getTools(), "North");
		frame.getContentPane().add(mainPanel, "Center");
	//	frame.getContentPane().add(tools.getTools(), "North");

		frame.addWindowListener( new WindowAdapter() {
			public void windowClosing(WindowEvent evt) {
				System.exit(0);
			}
		});

		JPanel menuPanel = new JPanel(new BorderLayout() );
		menuBar = new JMenuBar();

		fileMenu = new JMenu("File");
		JMenuItem printMI = new JMenuItem("print");
		printMI.addActionListener(this);
		fileMenu.add(printMI);
		JMenuItem closeMI = new JMenuItem("exit");
		closeMI.addActionListener(this);
		fileMenu.add(closeMI);
		menuBar.add(fileMenu);

		initDB();
		dbMenu = new JMenu("Database");
		dbMI = new JMenuItem[db.length];
		for( int i=0 ; i<db.length ; i++) {
			dbMI[i] = new JMenuItem(db[i].getDBName(), Icons.UNSELECTED);
			dbMenu.add( dbMI[i] );
			dbMI[i].addActionListener(this);
		}
		menuBar.add(dbMenu);
		
		opMenu = new JMenu("Options");
		opMI = new JMenuItem("Preferences");
		opMenu.add(opMI);
		opMI.addActionListener(this);		
		colorScaleCB = new JCheckBoxMenuItem("Color Scale", false );
		opMenu.add( colorScaleCB );
		colorScaleCB.addActionListener(this);
		colorScale = null;
		mapScaleCB = new JCheckBoxMenuItem("Map Scale", false );
		opMenu.add( mapScaleCB );
		mapScaleCB.addActionListener(this);
		mapScale = null;

		menuBar.add(opMenu);
		
		hPane = new JSplitPane( JSplitPane.HORIZONTAL_SPLIT );
		hPane.setLeftComponent( sp );
		hPane.setOneTouchExpandable(true);

		JPanel panel = new JPanel( new GridLayout(0,1) );
		dbLabel = new JLabel("");
		dbLabel.setForeground(Color.black);
		panel.add(dbLabel);
		closeDB = new JButton("close");
		closeDB.addActionListener(this);
		panel.add(closeDB);
		dialog = new JPanel(new BorderLayout());
		dialog.add( panel, "North");

		vPane = new JSplitPane( JSplitPane.VERTICAL_SPLIT );
		vPane.setTopComponent( hPane );
		vPane.setOneTouchExpandable(true);
		mainPanel.add(vPane, "Center");
	//	frame.getContentPane().add(vPane, "Center");

		JMenuBar helpBar = new JMenuBar();
		menuPanel.add( menuBar, "Center" );
		JMenu help = new JMenu("Help");
		helpBar.add( help );
		JMenuItem helpMI = new JMenuItem("Show Help");
		help.add( helpMI );
		menuPanel.add( helpBar, "East" );
		helpMI.addActionListener( this );
		if( whichMap==1 ) {
			JMenuItem aboutMI = new JMenuItem("About AMBS");
			help.add( aboutMI );
			aboutMI.addActionListener( this );
		} else {
			JMenuItem aboutMI = new JMenuItem("About RidgeMBS");
			help.add( aboutMI );
			aboutMI.addActionListener( this );
		}
		frame.getContentPane().add(menuPanel, "North");
	//	frame.setJMenuBar( menuBar );
		frame.pack();
		frame.setSize( 1000, 800 );
		frame.show();
	//	if( whichMap==0 ) {
	//		Point2D p2d = map.getProjection().getMapXY( new Point(60, 0) );
	//		map.zoomOut( new Point((int)p2d.getX(), (int)p2d.getY()) );
	//	}
	}
	void initDB() {
		if( whichMap==0 ) {
			db = new Database[9];
			db[0] = (Database) new MGG(map, 2900);
			if( directory != null ) {
				db[1] = (Database) new MBTracks(map, 4000,
					"file:"+(new File(directory)).getPath()+"/mb_control") ;
			} else {
				db[1] = (Database) new MBTracks(map, 4000);
			}
			db[2] = (Database) new PDB(map);
			db[3] = (Database) new EQ(map);
			db[4] = (Database) new PMEL(map);
			db[5] = (Database) new MCS(map);
			db[6] = (Database) new haxby.db.age.Isochrons( map );
			db[7] = (Database) new haxby.db.dig.Digitizer( map );
			db[8] = (Database) new xb.mcs.XMCS( map );
		} else {
			db = new Database[7];
			db[0] = (Database) new MGG(map, 2900);
			if( directory != null ) {
				db[1] = new MBTracks(map, 4000, 
					"file:"+(new File(directory)).getPath()+"/mb_control") ;
			} else {
				db[1] = new MBTracks(map, 4000,
					"http://ocean-ridge.ldeo.columbia.edu/antarctic/mb_control" );
			}
			db[2] = (Database) new EQ(map);
			db[3] = (Database) new Radar( map );
		//	db[3] = (Database) new PDB(map);
			db[4] = (Database) new haxby.db.dig.Digitizer( map );
			db[5] = (Database) new haxby.db.scs.SCS( map );
			db[6] = (Database) new haxby.db.age.Isochrons( map );
		}
	}
	public void keyPressed( KeyEvent evt ) {
	}
	public void keyTyped( KeyEvent evt ) {
	}
	public void keyReleased( KeyEvent evt ) {
		if( evt.getKeyCode() == KeyEvent.VK_F ) {
			tools.focus.doClick();
		} else if( evt.getKeyCode() == KeyEvent.VK_M ) {
			tools.maskB.doClick();
		}
	}
	public void setMask( boolean tf ) {
		baseMap.maskImage( tf );
		focus.maskImage( tf );
		map.repaint();
	}
	public void mapFocus() {
		map.getTopLevelAncestor().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		if( whichMap==0 ) {
			if( map.getZoom()<=1.5) {
				map.getTopLevelAncestor().setCursor(Cursor.getDefaultCursor());
				return;
			}
			MMapServer.getImage( map.getClipRect2D(), focus, 512);
			if(!MMapServer.getMaskImage( map.getClipRect2D(), focus, 512)) {
				System.out.println("mask failed");
			}
			map.repaint();
		} else {
			if( map.getZoom()<=1.5) {
				map.getTopLevelAncestor().setCursor(Cursor.getDefaultCursor());
				return;
			}
			SPMapServerA.getImage( map.getClipRect2D(), focus, 512);
			if(!SPMapServerA.getMaskImage( map.getClipRect2D(), focus, 512)) {
				System.out.println("mask failed");
			}
			map.repaint();
		}
		map.getTopLevelAncestor().setCursor(Cursor.getDefaultCursor());
	}
	public void loadGrid() {
		map.getTopLevelAncestor().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		if( whichMap==0 ) {
			MGridServer.getGrid(map.getClipRect2D(), focus, 512);
		} else {
			SPGridServer.getGrid(map.getClipRect2D(), focus, 512);
		}
		mapFocus();
		map.getTopLevelAncestor().setCursor(Cursor.getDefaultCursor());
	}
	public void contour() {
		map.getTopLevelAncestor().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		JPanel panel = new JPanel(new GridLayout(0, 1));
		JLabel label = new JLabel( "Enter Contour Interval" );
		label.setForeground( Color.black);
		JTextField field = new JTextField(Integer.toString(focus.getInterval()));
		JCheckBox plot = new JCheckBox("plot contours", true);
		panel.add(label);
		panel.add( field );
		panel.add( plot );
		JOptionPane.showMessageDialog(frame, panel, "contour interval", 
				JOptionPane.PLAIN_MESSAGE);
		int interval = 0;
		if( !plot.isSelected() ) interval = -1;
		else interval = (int)Math.rint( Double.parseDouble(field.getText()) );
		focus.contourGrid(interval);
		map.getTopLevelAncestor().setCursor(Cursor.getDefaultCursor());
	}
//	JEditorPane ep=null;
//	public void hyperlinkUpdate(HyperlinkEvent e) {
//		if( e.getEventType() == HyperlinkEvent.EventType.ACTIVATED ) try  {
//			System.out.println( e.getURL().toString() );
//			ep.setPage ( e.getURL() );
//		} catch(IOException ex) {
//		}
//	}
	public void actionPerformed(ActionEvent evt) {
		String name = evt.getActionCommand();
		if( name.equals("Show Help") ) {
			try {
				if( browser==null ) browser = new XBrowser();
				browser.setHelpURL();
				browser.showBrowser();
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		} else if( name.equals("About AMBS") ) {
			try {
				String ref = "http://data.ldeo.columbia.edu/antarctic/info.html";
				if( browser==null ) browser = new XBrowser(ref);
				else browser.setURL( ref );
				browser.showBrowser();
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		} else if( name.equals("About RidgeMBS") ) {
			try {
				String ref = "http://ocean-ridge.ldeo.columbia.edu/general/html/RMBS-intro.html";
				if( browser==null ) browser = new XBrowser(ref);
				else browser.setURL( ref );
				browser.showBrowser();
			} catch (java.io.IOException e) {
				e.printStackTrace();
			}
		} else if( evt.getSource() == closeDB ) {
			Runtime rt = Runtime.getRuntime();
			long free = rt.freeMemory()/1024/1024;
			long total = rt.totalMemory()/1024/1024;
			System.out.println("before:\t" + free +" MB Free,\t" + (total-free) +" MB used");
			if(currentDB == null ) return;
			map.removeOverlay( currentDB);
			currentDB.setEnabled(false);
			dialog.remove( currentDB.getSelectionDialog() );
			currentDB.disposeDB();
			for( int k=0 ; k<db.length ; k++) {
				if(currentDB==db[k]) {
					dbMI[k].setIcon(Icons.UNSELECTED);
					break;
				}
			}
			hPane.setRightComponent( null );
			vPane.setBottomComponent( null );
			System.gc();
			currentDB = null;
			free = rt.freeMemory()/1024/1024;
			total = rt.totalMemory()/1024/1024;
			System.out.println("after:\t" + free +" MB Free,\t" + (total-free) +" MB used");
			return;
		} else if( name.equals("print") ) {
			PrinterJob job = PrinterJob.getPrinterJob();
			PageFormat fmt = job.pageDialog(job.defaultPage());
			job.setPrintable(map, fmt);
			try {
				if(job.printDialog()) job.print();
			} catch (PrinterException pe) {
				pe.printStackTrace();
			}
			return;
		} else if( name.equals("exit") ) {
			System.exit(0);
			return;		
		} else if (name.equals("Preferences"))
		{
			this.showOps();
		}
		else if (name.equals("Ok"))
		{
			this.acceptOps();
		}		
		else if (name.equals("Preview"))
		{
			this.previewOps();						
		}
		else if (name.equals("Cancel"))
		{
			this.cancelOps();
		}
		else if (name.equals("Defaults"))
		{			
			this.defaultOps();								
		}
		else if (name.equals("Reset"))
		{
			this.resetOps();
		}
		else if (name.equals("Map Scale"))
		{
			if( mapScale==null ) mapScale=new MapScale(map);
			if( mapScaleCB.getState() ) {
				map.addMapInset( mapScale );
				map.addMouseListener( mapScale );
				map.addMouseMotionListener( mapScale );
			} else {
				map.removeMapInset( mapScale );
				map.removeMouseListener( mapScale );
				map.removeMouseMotionListener( mapScale );
			}
			map.repaint();
		}
		else if (name.equals("Color Scale"))
		{
			if( colorScale==null ) colorScale=new MapColorScale(map);
			if( colorScaleCB.getState() ) {
				map.addMapInset( colorScale );
				map.addMouseListener( colorScale );
				map.addMouseMotionListener( colorScale );
			} else {
				map.removeMapInset( colorScale );
				map.removeMouseListener( colorScale );
				map.removeMouseMotionListener( colorScale );
			}
			map.repaint();
		}
		else if (name.equals("upView"));
		{
			;
		}
		
		if (db == null)
			return;
		for( int i=0 ; i<db.length ; i++) {
			if( name.equals( db[i].getDBName()) ) {
				if(db[i].loadDB()) {
					if( currentDB != null) {
						currentDB.setEnabled(false);
						dialog.remove( currentDB.getSelectionDialog() );
					}
					currentDB = db[i];
					currentDB.setEnabled(true);
					((JMenuItem)evt.getSource()).setIcon(Icons.SELECTED);
					dbLabel.setText( currentDB.getDBName() );
					dialog.add( currentDB.getSelectionDialog(), "South");
					hPane.setRightComponent( dialog );
					if( currentDB.getSelectionDialog() != null ) {
						int w = currentDB.getSelectionDialog().getPreferredSize().width;
						hPane.setDividerLocation( hPane.getSize().width -w 
							-hPane.getDividerSize() );
					}
					vPane.setBottomComponent( currentDB.getDataDisplay() );
					if( currentDB.getDataDisplay() != null ) {
						int h = currentDB.getDataDisplay().getPreferredSize().height;
						if(h>200) h=200;
						vPane.setDividerLocation( vPane.getSize().height - h 
								- vPane.getDividerSize() );
					}
					while( map.hasOverlay( db[i] ) ) {
						map.removeOverlay(db[i]);
					}
					map.addOverlay( db[i] );
				}
				return;
			}
		}
	}
	private void showOps()
	{
		map.removeMouseListener(zoomer);
			
		option = new JFrame();			
		option.setDefaultCloseOperation( option.DO_NOTHING_ON_CLOSE);
	//	option.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		
		JTabbedPane prefer = new JTabbedPane();
		
		JPanel mapbord = new JPanel(new BorderLayout());
		
		// Font
		JPanel fonts = new JPanel(new FlowLayout());
		
		tmpFont = map.getMapBorder().getFont();
		
		font = new JComboBox(GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames());
		font.setName("Font");
		font.setSelectedItem(map.getMapBorder().getFont().getName());
		fonts.add(font);
		
		JLabel fontSizeL = new JLabel("Font size:");
		fonts.add(fontSizeL);
		
		fontSize = new JTextField();			
		fontSize.setText("" + map.getMapBorder().getFont().getSize());
		fonts.add(fontSize);
		
		//Scrollbar
		
		scroll = (map.scrollPane.getHorizontalScrollBarPolicy() == JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
		doScroll = new JCheckBox("Enable Scrollbars", scroll);
		fonts.add(doScroll);
		
		mapbord.add(fonts, BorderLayout.NORTH);
		
		//MapBorder sides				
		
		JPanel sides = new JPanel(new FlowLayout());
		JLabel explSides = new JLabel("Map Annotations: ");
		sides.add(explSides);
		
		for (int i = 0; i< tmpSides.length; i++)
			tmpSides[i] = map.getMapBorder().isSideSelected(i);
		
		side = new JCheckBox[4];
		side[0] = new JCheckBox("Top", tmpSides[0]);
		side[1] = new JCheckBox("Bottom", tmpSides[1]);
		side[2] = new JCheckBox("Left", tmpSides[2]);
		side[3] = new JCheckBox("Right", tmpSides[3]);
		
		for (int i = 0; i< side.length; i++)
			sides.add(side[i]);
		
		mapbord.add(sides, BorderLayout.CENTER);		
		
		//Buttons
		
		JPanel buttons = new JPanel(new FlowLayout());
		
		JButton ok = new JButton("Ok");
		ok.setToolTipText("Accept current settings");
		ok.addActionListener(this);
		buttons.add(ok);

		JButton prev = new JButton("Preview");
		prev.setToolTipText("Preview current settings");
		prev.addActionListener(this);
		buttons.add(prev);
		
		JButton reset = new JButton("Reset");
		reset.setToolTipText("Reset settings");
		reset.addActionListener(this);
		buttons.add(reset);
		
		JButton defaults = new JButton("Defaults");
		defaults.setToolTipText("Return to default settings");
		defaults.addActionListener(this);
		buttons.add(defaults);
		
		JButton cancel = new JButton("Cancel");
		cancel.setToolTipText("Cancel");
		cancel.addActionListener(this);
		buttons.add(cancel);
		
		option.getContentPane().add(buttons, BorderLayout.SOUTH);
		
		// Tab
		
		prefer.add("Map Border", mapbord);
		
		//ShoreLine
		
		if (whichMap == 1)
		{
			opShorePanel = new ShoreOptionPanel(shoreLine);
			prefer.add("Shoreline", opShorePanel);
		}
		
		option.getContentPane().add(prefer);
		option.pack();
		option.show();
	}
	
	private void defaultOps()
	{
		map.getMapBorder().setFont(defaultFont);
			
			for (int i = 0; i < dfltSides.length; i++)
			{
				map.getMapBorder().setSide(i, dfltSides[i]);
				side[i].setSelected(dfltSides[i]);
			}						
				
		font.setSelectedItem(defaultFont.getName());
		fontSize.setText("" + defaultFont.getSize());	
		
		map.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		map.scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		
		doScroll.setSelected(true);
		
		if (whichMap == 1)
			opShorePanel.defaults();
	}
	
	private void resetOps()
	{
		for (int i = 0; i<side.length; i++)	
				side[i].setSelected(tmpSides[i]);
			
		font.setSelectedItem(tmpFont.getName());
		fontSize.setText("" + tmpFont.getSize());
					
		map.getMapBorder().setFont(tmpFont);
		
		for (int i = 0; i < tmpSides.length; i++)
			map.getMapBorder().setSide(i, side[i].isSelected());
			
		if (scroll)
		{
			map.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			map.scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		}
		else
		{
			map.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			map.scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
		}
		
		doScroll.setSelected(scroll);
		
		if (whichMap == 1)
			opShorePanel.cancel();
	}
	
	private void cancelOps()
	{		
		this.resetOps();
		option.hide();
		option.dispose();
		map.addMouseListener(zoomer);
	}
	
	private void previewOps()
	{
		Font theFont = new Font( (String) font.getSelectedItem(), Font.PLAIN, Integer.parseInt(fontSize.getText()));
		map.getMapBorder().setFont(theFont);
		
		for (int i = 0; i < tmpSides.length; i++)
			map.getMapBorder().setSide(i,side[i].isSelected());
			
		if (doScroll.isSelected())
		{
			map.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
			map.scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		}
		else
		{
			map.scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			map.scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
		}
		
		if (whichMap == 1)
			opShorePanel.preview();
	}
	
	private void acceptOps()
	{
		this.previewOps();
		
		option.hide();	
		option.dispose();
		
		map.addMouseListener(zoomer);
	}		
	public static void main( String[] args) {
		if( args.length==0) {
			new MapApp();
		} else if( args.length==1) {
			new MapApp(args[0]);
		} else if( args.length==2) {
			new MapApp(args[0], args[1]);
		}
	}
	public static String getBaseURL() {
		return BASE_URL;
	}
	public static void setBaseURL( String url ) {
		BASE_URL = url;
	}
	public static JFileChooser getFileChooser() {
		if( chooser==null ) chooser = new JFileChooser(System.getProperty("user.dir"));
		return chooser;
	}
}
