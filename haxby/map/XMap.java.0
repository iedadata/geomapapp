package haxby.map;

import org.geomapapp.grid.Grid2DOverlay;

import haxby.proj.*;
import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.text.NumberFormat;
import java.awt.print.*;
import java.awt.geom.*;
import java.awt.image.*;
import java.util.Vector;

import com.sun.image.codec.jpeg.*;

/**
 	XMap loads and manipulates the map.
 */
public class XMap extends haxby.util.ScaledComponent implements Zoomable,
				Scrollable, Printable  {
					
					
	Projection proj;
	
	/**
	 	Base map; Optional.
	 */
	protected BufferedImage image = null;
	
	/**
	 	Overlay objects added to the map.
	 */
	protected Vector overlays;
	
	/**
	 	Not implemented.
	 */
	protected Vector mapInsets;
	

	protected MapTools tools;
	/**
	 	Scale factor
	 */
	protected double zoom;
	
	/**
	 	Angle of ratation; Not implemented.
	 */
	protected int rotation;
	
	/**
	 	Dimension of map when zoom = 0;
	 */
	protected int width, height;
	
	/**
	 	Used to scroll the map.
	 */
	protected JScrollPane scrollPane = null;
	
	/**
	 	MapBorder draws Latitude/Longitude annotations on the border.
	 */
	protected MapBorder mapBorder = null;
	
	/**
	 	Plot the Latitude/Longitude lines.
	 */
	protected boolean graticule = true;
	
	/**
	 	For CylindricalProjection, wrap = nodes per 360 degrees; otherwise wrap = -1.
	 */
	protected double wrap;
	Object app;
	Grid2DOverlay focus = null;
	
	public XMap(Object app, Projection proj, BufferedImage image) {
		this.app = app;
		this.proj = proj;
		this.image = image;
		width = image.getWidth();
		height = image.getHeight();
		overlays = new Vector();
		mapInsets = null;
		zoom = 1d;
		rotation = 0;
		try {
			CylindricalProjection p = (CylindricalProjection) proj;
			wrap = Math.rint(360.*(p.getX(10.)-p.getX(9.)));
		} catch (ClassCastException ex) {
			wrap = -1.;
		}
	}
	public XMap(Object app, Projection proj, int width, int height) {
		this.app = app;
		this.proj = proj;
		this.width = width;
		this.height = height;
		overlays = new Vector();
		mapInsets = null;
		zoom = 1d;
		setLayout( null );
	//	addMapInset( new haxby.image.Logo(this) );
		try {
			CylindricalProjection p = (CylindricalProjection) proj;
			wrap = Math.rint(360.*(p.getX(10.)-p.getX(9.)));
		} catch (ClassCastException ex) {
			wrap = -1.;
		}
	}
	
	/**
	 	Assigns the scrollPane.
	 */
	public void addNotify() {
		super.addNotify();
		Container c = getParent();
		while(c != null) {
			if( c instanceof JScrollPane ) {
				scrollPane = (JScrollPane) c;
				return;
			}
			c = c.getParent();
		}
	}
	
	/**
	 	Get wrap value.
	 	@return wrap value.
	 */
	public double getWrap() {
		return wrap;
	}
	
	public MapTools getMapTools() {
		if( app instanceof MapApp ) {
			tools = ((MapApp)app).tools;
		}
		return tools;
	}
	
	public BufferedImage getBaseMap(){
	    if( app instanceof MapApp ) {
			return ((MapApp)app).getBaseMap();
		}
		return null;
	}

	public org.geomapapp.credit.Credit getCredit() {
		if( app instanceof MapApp ) {
			return ((MapApp)app).credit;
		}
		return null;
	}
		
	/**
		Sets the map border.
		@param border map border to set.
	 */
	public void setMapBorder( MapBorder border ) {
		mapBorder = border;
	}
	
	/**
	 	Get the map border.
	 	@return the map border.
	 */
	public MapBorder getMapBorder() {
		return mapBorder;
	}
	
	/**
	 	Gets the default height/width.
	 	@return the default height/width in a dimension.
	 */
	public Dimension getDefaultSize() {
		return new Dimension( width, height );
	}
	
	/**
	 	Gets the Preferred Size of map.
	 	@return the perferred size of the map.
	 */
	public Dimension getPreferredSize() {
		Dimension dim = new Dimension( (int) Math.ceil( zoom*(double)width ),
					(int) Math.ceil( zoom*(double)height ));
		if(rotation%2==1) {
			int tmp = dim.width;
			dim.width = dim.height;
			dim.height = tmp;
		}
		if(mapBorder != null) {
			Insets ins = mapBorder.getBorderInsets(this);
			dim.width += ins.left + ins.right;
			dim.height += ins.top + ins.bottom;
		}
		return dim;
	}
	
	/**
	 	If there is an overlay.
	 	@return If there is an overlay.
	 */	 
	public boolean hasOverlay( Overlay overlay ) {
		return overlays.contains( overlay );
	}
	
	/**
	 	Adds Overlay object to wrap.
	 	@param overlay Overlay object to add.
	 */
	public void addOverlay( int index, Overlay overlay ) {
		if( overlays.contains(overlay) )return;
		overlays.add(index, overlay );
		if( overlay instanceof Grid2DOverlay ) focus=(Grid2DOverlay)overlay;
	}
	public void addOverlay( Overlay overlay ) {
		if( overlays.contains(overlay) )return;
		overlays.add(overlay );
		if( overlay instanceof Grid2DOverlay ) focus=(Grid2DOverlay)overlay;
	}
	public Grid2DOverlay getFocus() {
		return focus;
	}
	/**
	 	Removes Overlay object from wrap.
	 	@param overlay Overlay object to remove.
	 */
	public int removeOverlay( Overlay overlay ) {
		int index = overlays.indexOf(overlay);
		overlays.remove( overlay );
		return index;
	}
	
	/**
	 	Not Implemented.
	 */
	public void rotate(int direction) {
		Dimension dim = getPreferredSize();
		Rectangle rect = getVisibleRect();
		if(dim.width>rect.width) rect.width = dim.width;
		if(dim.height>rect.height) rect.height = dim.height;
		if(proj instanceof CylindricalProjection ) return;
		rotation += (direction>0) ? 1:3;
		rotation &= 0x3;
		JScrollBar hsb = scrollPane.getHorizontalScrollBar();
		int x = hsb.getValue();
		JScrollBar vsb = scrollPane.getVerticalScrollBar();
		int y = vsb.getValue();
		if(direction>0) {
			hsb.setValue(dim.height - rect.height - y);
			vsb.setValue(x);
		} else {
			hsb.setValue(y);
			vsb.setValue(dim.width -rect.width - x);
		}
		revalidate();
		repaint();
	}
	
	/**
	 	Zoom in to point p.
	 	@param point to zoom to.
	 */
	public void zoomIn( Point p ) {
		doZoom( p, 2d );
	}
	
	/**
	 	Zoom out from point p.
	 	@param point to zoom from.
	 */
	public void zoomOut( Point p ) {
		doZoom( p, .5d );
	}
	
	/**
	 	Set if the graticule should be displayed.
	 	@param tf True if graticul should be displayed.
	 */
	public void setGraticule( boolean tf ) {
		if( graticule==tf )return;
		graticule = tf;
		repaint();
	}
	
	/**
	 	Zoom to a rectangle defined by a mouse.
	 	@param rect Rectangled defined by the mouse.
	 */
	public void zoomTo( Rectangle rect ) {
		if(rect.width<10 || rect.height<10) return;
		Point p = new Point( rect.x + rect.width/2, rect.y + rect.height/2 );
		Rectangle r = getVisibleRect();
		Insets insets = new Insets(0,0,0,0);
		if(mapBorder!=null) insets = mapBorder.getBorderInsets(this);
		r.width -= insets.left + insets.right;
		r.height -= insets.top + insets.bottom;
		double factor = Math.min( r.getWidth()/rect.getWidth(),
					r.getHeight()/rect.getHeight() );
		doZoom( p, factor );
	}
	
	/**
	 	Zoom by factor and center on point p.
	 	@param p point to center on.
	 	@param factor Factor to zoom by.
	 */
	public void doZoom( Point2D p, double factor ) {
		AffineTransform ATrans = new AffineTransform();
		ATrans.scale( zoom, zoom );
		Insets insets = getInsets();
		Rectangle rect = getVisibleRect();
		Dimension dim = getParent().getSize();
		if( dim.width>rect.width) rect.width = dim.width;
		if( dim.height>rect.height) rect.height = dim.height;
		rect.width -= insets.left + insets.right;
		rect.height -= insets.top + insets.bottom;
		double nX = (p.getX() - insets.left - (rect.width/(2.*factor)));
		double nY = ( p.getY() - insets.top - rect.height/(2.*factor));
		Point2D newP = null;
		try {
			newP = ATrans.inverseTransform( new Point2D.Double(nX, nY), null );
		} catch (Exception ex ) {
			return;
		}
		ATrans.scale( factor, factor );
		zoom *= factor;
		newP = ATrans.transform( newP, null );
		int newX = (int)newP.getX(); // + insets.left;
		int newY = (int)newP.getY(); // + insets.top;
		invalidate();
		scrollPane.validate();
		JScrollBar sb = scrollPane.getHorizontalScrollBar();
		sb.setValue(newX);
		sb = scrollPane.getVerticalScrollBar();
		sb.setValue(newY);
		revalidate();
	}
	
	public double[] getScales() {
		return new double[] { zoom, zoom};
	}
	
	public Insets getInsets() {
		if(mapBorder != null) {
			return mapBorder.getBorderInsets(this);
		}
		return super.getInsets();
	}

	/**
	 	Gets the zoom factor;
	 	@return the zoom factor.
	 */	 
	public double getZoom() {
		return zoom;
	}
	
	/**
	 	Rectangle to zoom to.
	 */
	Rectangle zoomRect = null;
	
	/**
	 	Sets the rectangle to zoom to.
	 	@param Rectangle to zoom to.
	 */
	public void setRect(Rectangle rect) {
		synchronized (getTreeLock()) {
			Graphics2D g = (Graphics2D)getGraphics();
			g.setXORMode(Color.white);
			if(zoomRect!=null) g.draw(zoomRect);
			zoomRect = rect;
			if(zoomRect!=null) g.draw(zoomRect);
		}
	}
	
	public JLabel getInfoLabel() {
		if( app instanceof MapApp ) {
			try {
				return ((MapApp)app).tools.info;
			} catch(Exception ex) {
				return null;
			}
		} else {
			return null;
		}
	}

	public boolean isSelectable() {
		return getMapTools().isSelectable();
	}
	
	/**
	 	Sets the coordinates of mouse to be displayed.
	 	@param p mouse location.
	 */
	public void setXY( Point p ) {
		if( p==null ) {
			if( app instanceof MapApp ) {
				((MapApp)app).tools.info.setText("");
			} else if(app instanceof PolarMapApp ) {
				((PolarMapApp)app).tools.info.setText("");
			}
			return;
		}
		Point2D.Double pt = (Point2D.Double)proj.getRefXY( getScaledPoint(p));
		setLonLat( pt );
	}
	public void setLonLat( double lon, double lat) {
		setLonLat( new Point2D.Double(lon, lat) );
	}
	void setLonLat( Point2D.Double pt ) {
		Point2D.Double pt0 = new Point2D.Double(pt.x, pt.y);
		while( pt.x>180. ) pt.x-=360.;
		String ew = "E";
		String ns = "N";
		if(pt.x<0.) {
			pt.x = -pt.x;
			ew = "W";
		}
		if(pt.y<0.) {
			pt.y = -pt.y;
			ns = "S";
		}
		NumberFormat fmt = NumberFormat.getInstance();
		fmt.setMaximumFractionDigits(3);
		fmt.setMinimumFractionDigits(3);
		NumberFormat fmt1 = NumberFormat.getInstance();
		fmt1.setMaximumFractionDigits(1);
		fmt1.setMinimumFractionDigits(1);
		if( app instanceof MapApp ) {
			Grid2DOverlay focus = null;
			for( int i=0 ; i<overlays.size() ; i++) {
				if( overlays.get(i) instanceof Grid2DOverlay) {
					focus = (Grid2DOverlay)overlays.get(i);
					break;
				}
			}	
			float z = (focus==null)? Float.NaN : focus.getZ(pt0);
			((MapApp)app).tools.info.setText( "("+fmt.format(pt.getX()) 
				+" "+ew+", "+ fmt.format(pt.getY()) +" "+ns
				+( Float.isNaN(z) ? "" : ", "+ fmt1.format( (double)z ) +" m" )
				+"), zoom factor = "+ fmt1.format(zoom) );
		} else if( app instanceof PolarMapApp ) {
			((PolarMapApp)app).tools.info.setText( "("+fmt.format(pt.getX()) 
				+" "+ew+", "+ fmt.format(pt.getY()) +" "+ns+")");
		}
	}
	
	/**
	 	Gets the projection.
	 	@return the projection.
	 */
	public Projection getProjection() {
		return proj;
	}
	
	/**
	 	Not implemented.
	 */
	public void addMapInset( MapInset inset ) {
		if( mapInsets==null ) mapInsets = new Vector();
		mapInsets.add( inset );
	}
	
	/**
	 	Not implemented.
	 */
	public void removeMapInset( MapInset inset ) {
		mapInsets.remove( inset );
	}
//	public boolean isFocusTraversable() { return true; }

	/**
	 	Not Implemented.
	 */
	public double[] getWESN() {
		double[] wesn = new double[4];
		Rectangle r = getVisibleRect();
		if(mapBorder != null) {
			r = mapBorder.getInteriorRectangle(this, r.x, r.y, r.width, r.height);
		}
		Point2D.Double pt = new Point2D.Double( r.getX(), r.getY() );
		pt = (Point2D.Double)proj.getRefXY( getScaledPoint(pt));
		wesn[0] = pt.x;
		wesn[3] = pt.y;
		pt = new Point2D.Double( r.getX()+r.getWidth(),
					 r.getY()+r.getHeight() );
		pt = (Point2D.Double)proj.getRefXY( getScaledPoint(pt));
		wesn[1] = pt.x;
		wesn[2] = pt.y;
		return wesn;
	}
	
	/**
	 	Gets the scaled and offset graphics object.
	 	<pre>
	 	<b>Caution</b> - Must always be put in the code block:
	 		XMap map;
	 		Shape stuff;
	 		synchronized(map.getTreeLock())
	 		{
	 			Graphics2D g = map.getGraphics2D();
	 			g.draw(stuff);
	 		}
	 	This ensures that the recorded graphics are syncronized.
	 	</pre>
	 	@return the scaled and offset graphics object.
	 */
	public Graphics2D getGraphics2D() {
		Graphics2D g = (Graphics2D) getGraphics();
		Rectangle r = getVisibleRect();
		if(mapBorder != null) {
			g.clip(mapBorder.getInteriorRectangle(this, r.x, r.y, r.width, r.height));
			Insets ins = mapBorder.getBorderInsets(this);
			g.translate((double)ins.left, (double)ins.top);
		} else {
			g.clip(r);
		}
		g.scale(zoom, zoom);
		return g;
	}
	
	/**
	 	Gets the map coordinates (Projection object) at the curso location.
	 	@param mousePoint location of mouse.
	 	@return the coordinates of the mouse releative to the map.
	 */
	public Point2D getScaledPoint( Point2D mousePoint ) {
		double x = mousePoint.getX();
		double y = mousePoint.getY();
		if(mapBorder != null) {
			Insets ins = mapBorder.getBorderInsets(this);
			x -= (double) ins.left;
			y -= ins.top;
		}
		x /= zoom;
		y /= zoom;
		return new Point2D.Double(x, y);
	}
	
	/**
	 	Saves current image.
	 */
	public void saveBaseMap() throws IOException {
		JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
		int ok = chooser.showSaveDialog(null);
		if(ok==chooser.CANCEL_OPTION) return;

		Insets ins = new Insets(0,0,0,0);
		Rectangle r = getVisibleRect();
		int w = width;
		int h = height;
		Font font = null;
		if(mapBorder != null) {
			ins = mapBorder.getBorderInsets(this);
			float scale = (float)width / (float)r.width;
			font = mapBorder.getFont();
			Font font1 = font.deriveFont(scale*(float)font.getSize());
			mapBorder.setFont(font1);
			ins = mapBorder.getBorderInsets(this);
			w += ins.left+ins.right;
			h += ins.bottom+ins.top;
		}
		BufferedImage im = new BufferedImage(w, h,
					BufferedImage.TYPE_INT_RGB);
		Graphics2D g2 = im.createGraphics();
		if(mapBorder != null) {
			mapBorder.paintBorder(this, g2, 0, 0, w, h);
			g2.clip( mapBorder.getInteriorRectangle(this, 
						0, 0, w, h) );
			g2.translate(ins.left, ins.top);
			mapBorder.setFont(font);
		}
		for( int i=0 ; i<overlays.size() ; i++) {
			if( overlays.get(i) instanceof MapOverlay ) {
				((MapOverlay)overlays.get(i)).draw(g2);
				break;
			}
		}
		BufferedOutputStream out = new BufferedOutputStream(
					new FileOutputStream( chooser.getSelectedFile()));
		JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
		encoder.encode(im);
		out.flush();
		out.close();
	}
	
	/**
	 	Saves current image.as a JPEG.
	 */
	public void saveJPEGImage(File file) throws IOException {
		Rectangle r = getVisibleRect();
		BufferedImage im = new BufferedImage(r.width, r.height, BufferedImage.TYPE_INT_RGB);
		Graphics2D g2d = im.createGraphics();
		g2d.translate(-r.getX(), -r.getY());
		paint(g2d);
		BufferedOutputStream out = new BufferedOutputStream(
					new FileOutputStream( file ));
		JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
		encoder.encode(im);
	}
	public void saveJPEGImage() throws IOException {
		JFileChooser chooser = MapApp.getFileChooser();
		int ok = chooser.showSaveDialog(getTopLevelAncestor());
		if(ok==chooser.CANCEL_OPTION) return;
		saveJPEGImage( chooser.getSelectedFile() );
	}
	
	/**
	 	Loads a JPEG.
	 */
	public byte[] getJPEGImage() throws IOException {
		Rectangle r = getVisibleRect();
		BufferedImage im = new BufferedImage(r.width, r.height, BufferedImage.TYPE_INT_RGB);
		Graphics2D g2d = im.createGraphics();
		g2d.translate(-r.getX(), -r.getY());
		paint(g2d);
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
		encoder.encode(im);
		return out.toByteArray();
	}
	
	/**
	 	Gets the region currently displayed in Projection coordinates.
	 	@return the region currently displayed in Projection coordinates.
	 */
	public Rectangle2D getClipRect2D() {
		Rectangle r = getVisibleRect();
		Dimension dim = getPreferredSize();
		r.width = Math.min(r.width, dim.width);
		r.height = Math.min(r.height, dim.height);
		AffineTransform at = new AffineTransform();
		if(rotation==1) {
			at.translate( 0., dim.getHeight() );
			at.rotate(-.5*Math.PI);
		} else if( rotation==2 ) {
			at.translate( dim.getWidth(), dim.getHeight() );
			at.rotate( Math.PI );
		} else if( rotation == 3) {
			at.translate( dim.getWidth(), 0. );
			at.rotate( .5*Math.PI );
		}
		if(rotation != 0) {
			Point2D p1 = at.transform(new Point(r.x,r.y), null);
			Point2D p2 = at.transform(new Point(r.x+r.width,r.y+r.width), null);
			r.x = (int) Math.min(p1.getX(), p2.getX());
			r.width = (int) Math.max(p1.getX(), p2.getX()) - r.x;
			r.y = (int) Math.min(p1.getY(), p2.getY());
			r.height = (int) Math.max(p1.getY(), p2.getY()) - r.y;
		}

		if(mapBorder != null) {
			Insets ins = mapBorder.getBorderInsets(this);
			r.width -= ins.left + ins.right;
			r.height -= ins.top + ins.bottom;
		}
		Rectangle2D.Double r2d = new Rectangle2D.Double(
				r.getX()/zoom, r.getY()/zoom,
				r.getWidth()/zoom, r.getHeight()/zoom);
		return r2d;
	}
	public Dimension getPreferredScrollableViewportSize() {
		return getPreferredSize();
	}
	public int getScrollableUnitIncrement(Rectangle visibleRect,
				int orientation, int direction) {
		if( orientation == SwingConstants.VERTICAL) return 10;
		int newX = visibleRect.x + (direction>0 ? 10 : -10);
		if( wrap>0. ) {
			int dx = (int) (wrap*zoom);
			int test = getPreferredSize().width - visibleRect.width;
			while( newX<0 ) newX += dx;
			while( newX>test ) newX -= dx;
		}
		return (direction>0) ? (newX-visibleRect.x) : -(newX-visibleRect.x);
	} 
	public int getScrollableBlockIncrement(Rectangle visibleRect,
				int orientation, int direction) {
		if( orientation == SwingConstants.VERTICAL) return visibleRect.height/2;
		int dx = visibleRect.width/2;
		int newX = visibleRect.x + (direction>0 ? dx : -dx);
		if( wrap>0. ) {
			dx = (int) (wrap*zoom);
			int test = getPreferredSize().width - visibleRect.width;
			while( newX<0 ) newX += dx;
			while( newX>test ) newX -= dx;
		}
		return (direction>0) ? (newX-visibleRect.x) : -(newX-visibleRect.x);
	} 
	public boolean getScrollableTracksViewportWidth() { return false; }
	public boolean getScrollableTracksViewportHeight() { return false; }
	
	/**
	 	Paints designated graphics.
	 	@param g what to paint.
	 */
	public void paintComponent( Graphics g ) {
		Graphics2D g2 = (Graphics2D)g;
		Rectangle clip = g.getClipBounds();
		Dimension dim = getPreferredSize();
		Rectangle r = getVisibleRect();
		if(r.width>dim.width) r.width = dim.width;
		if(r.height>dim.height) r.height = dim.height;
		AffineTransform at = g2.getTransform();
		Rectangle interior = new Rectangle();
		if(mapBorder != null) {
			mapBorder.paintBorder(this, g, r.x, r.y, r.width, r.height);
			interior = mapBorder.getInteriorRectangle(this,
					r.x, r.y, r.width, r.height);
			g2.clip( interior );
			Insets ins = mapBorder.getBorderInsets(this);
			g2.translate(ins.left, ins.top);
		}
// Mac fix?
		BufferedImage im = new BufferedImage(r.width, r.height, BufferedImage.TYPE_INT_RGB);
		Graphics2D g2d = im.createGraphics();
		g2d.setRenderingHint( RenderingHints.KEY_INTERPOLATION,
				RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		g2d.setColor( Color.white );
		g2d.fillRect( 0, 0, r.width, r.height);
		g2d.translate( -r.x, -r.y );
		g2d.scale(zoom, zoom);
		int i=0;
		if(image != null)g2d.drawImage(image, 0, 0, this);
		while( i<overlays.size() && overlays.get(i) instanceof MapOverlay ) {
			((Overlay)overlays.get(i++)).draw(g2d);
		}
		if( image != null || i!=0 ) {
			g2.translate( r.x, r.y);
			g2.drawImage( im, 0, 0, this);
			g2.translate( -r.x, -r.y);
		}
		g2.scale(zoom, zoom);
		int i0=i;
		for( i=i0 ; i<overlays.size() ; i++) {
			((Overlay)overlays.get(i)).draw(g2);
		}
		if( graticule && mapBorder instanceof PolarMapBorder) ((PolarMapBorder)mapBorder).draw(g2);
		if( mapInsets==null || mapInsets.size()==0 ) return;
		g2.setTransform(at);
		g2.setClip( getVisibleRect() );
		g2.translate( r.x, r.y );
		interior = getVisibleRect();
		for( i=0 ; i<mapInsets.size() ; i++) {
			((MapInset)mapInsets.get(i)).draw( g2, interior.width, interior.height );
		}
	}
	
	/**
	 	Prints the current view.
	 	@param g What to print.
	 	@param fmt Page format.
	 	@param pageNo Page Number.
	 	@return if the page exists.
	 */
	public int print( Graphics g, PageFormat fmt, int pageNo ) {
		if( pageNo>1 ) return NO_SUCH_PAGE;
		Graphics2D g2 = (Graphics2D)g;
		Dimension dim = getPreferredSize();
		Rectangle r = getVisibleRect();
		if(r.width>dim.width) r.width = dim.width;
		if(r.height>dim.height) r.height = dim.height;
	//	g.setClip( new Rectangle( 0, 0, r.width, r.height) );
		double w = fmt.getImageableWidth();
		double h = fmt.getImageableHeight();
		double x = fmt.getImageableX();
		double y = fmt.getImageableY();
		g2.translate(x, y);
		double scale = Math.min( w / r.getWidth(), h / r.getHeight());
		g2.translate( -r.getX()*scale, -r.getY()*scale );
		g2.scale( scale, scale);
	System.out.println(x +"\t"+ y +"\t"+ w +"\t"+ h  +"\t"+ zoom
			 +"\t"+ scale +"\t"+ r.getWidth() +"\t"+ r.getHeight());
		if(mapBorder != null) {
			mapBorder.paintBorder(this, g, r.x, r.y, r.width, r.height);
			g2.clip( mapBorder.getInteriorRectangle(this, 
						r.x, r.y, r.width, r.height));
			Insets ins = mapBorder.getBorderInsets(this);
			g2.translate(ins.left, ins.top);
		}
		g2.scale(zoom, zoom);
		if(image != null)g2.drawImage(image, 0, 0, this);
		for(int i=0 ; i<overlays.size() ; i++) {
			((Overlay)overlays.get(i)).draw(g2);
		}
		return PAGE_EXISTS;
	}
}
