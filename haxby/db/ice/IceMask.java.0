package haxby.db.ice;

import haxby.proj.*;

import java.io.*;
import java.awt.geom.Point2D;

public class IceMask {
	static PolarEquidistant proj = new PolarEquidistant(new Point2D.Double(265d, 199d),
					ConicProjection.NORTH, 30d, 11d);
	static int[][][] mask = null;
	static int[] bits = {0x80000000, 0x40000000, 0x20000000, 0x10000000,
			0x8000000, 0x4000000, 0x2000000, 0x1000000,
			0x800000, 0x400000, 0x200000, 0x100000,
			0x80000, 0x40000, 0x20000, 0x10000,
			0x8000, 0x4000, 0x2000, 0x1000,
			0x800, 0x400, 0x200, 0x100,
			0x80, 0x40, 0x20, 0x10,
			0x8, 0x4, 0x2, 0x1};
	static boolean init = false;
	public IceMask() throws IOException {
		if(!init) readMask();
	}
	static void readMask() throws IOException {
		mask = new int[226][293][14];
		java.net.URL url = new java.net.URL("http://ocean-ridge.ldeo.columbia.edu/"
				+"arctic/ice_mask/ice.masks");
		DataInputStream in = new DataInputStream(
			new BufferedInputStream(url.openStream()));
		//	new java.util.zip.GZIPInputStream(
		//	new BufferedInputStream(url.openStream())));
		for( int mon=0 ; mon<226 ; mon++) {
			for(int y=0 ; y<293 ; y++) {
				for(int x=0 ; x<14 ; x++) {
					mask[mon][y][x] = in.readInt();
				}
			}
		}
		in.close();
		init = true;
	}
	public static boolean isIce(int month, Point2D pt) {
		if( !init ) try {
			readMask();
		} catch (IOException ex ) {
			return false;
		}
		if( month<0 || month>225) return false;
		Point2D p = proj.getMapXY(pt);
		int x = (int)Math.rint(p.getX());
		if( x<0 || x>447 )return false;
		int y = (int)Math.rint(p.getY());
		if( y<0 || y>292 )return false;
		int k = x>>5;
		int b = x&31;
		if( (mask[month][y][k] & bits[b]) == 0)return false;
		return true;
	}
}
