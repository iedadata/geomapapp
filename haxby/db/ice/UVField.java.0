package haxby.db.ice;

import haxby.proj.*;
import java.io.*;
import java.util.*;
import java.awt.geom.*;

public class UVField {
	static boolean init = false;
	static float[][][] u = null;
	static float[][][] v = null;
	static int yr[] = null;
	static int mo[] = null;
	static double[] dayTab = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	static PolarEquidistant proj;
	int year;
	int month;
	double day;
	double time;
	double dStep, mStep;
	Point2D.Double point;
	public UVField() throws IOException {
		if(!init) readUV();
		init = true;
		year = 1979;
		month = 1;
		day = 0d;
		setTime(year, month, day);
		point = new Point2D.Double();
		setLonLat(new Point2D.Double(0d, 90d));
		dStep = Double.NaN;
		mStep = 1d;
	}
	static void readUV() throws IOException {
		proj = new PolarEquidistant(new Point2D.Double(23.5d, 19.5d),
					ConicProjection.NORTH, 30d, 1d);
		u = new float[226][29][41];
		v = new float[226][29][41];
		yr = new int[226];
		mo = new int[226];
		int i, j, k;
		File file = new File("/scratch/ridgembs/bill/arctic/trajectories/UV.dat");
		java.net.URL url = new java.net.URL("http://ocean-ridge.ldeo.columbia.edu/"
				+ "arctic/ice_flow/UV.dat");
		DataInputStream in = new DataInputStream(
					new BufferedInputStream(url.openStream()));
		for(k=0 ; k<226 ; k++) {
			yr[k] = in.readInt();
			mo[k] = in.readInt();
			double scale = daysPerMonth(yr[k], mo[k]) *86400d / 110.989e5;
			for(i=0 ; i<29 ; i++) {
				for(j=0 ; j<41 ; j++) {
					u[k][i][j] = in.readFloat() * (float)scale;
					v[k][i][j] = -in.readFloat() * (float)scale;
				}
			}
		}
		in.close();
	}
	public void setTime(double t) {
		time = t;
	}
	public void setTime(int year, int month, int day, int hour, int minute, int sec) {
		while(sec>=60) {
			sec-=60;
			minute++;
		}
		while(sec<0) {
			sec+=60;
			minute--;
		}
		while(minute>=60) {
			minute-=60;
			hour++;
		}
		while(minute<0) {
			minute+=60;
			hour--;
		}
		while(hour>=24) {
			hour-=24;
			day++;
		}
		while(hour<0) {
			hour+=24;
			day--;
		}
		while(month>12) {
			year++;
			month -= 12;
		}
		while(month<1) {
			year--;
			month += 12;
		}
		while(day<1) {
			month--;
			if(month==0) {
				month=12;
				year--;
			}
			day += (int)daysPerMonth(year, month);
		}
		while(day>(int)daysPerMonth(year, month)) {
			day -= (int)daysPerMonth(year, month);
			month++;
			if(month==13) {
				month=1;
				year++;
			}
		}
		this.day = (double)(day-1) + 
				((double)hour + 
					((double)minute + 
						(double)sec/60d
					) /60d
				) /24d;
		time = 12d * (double)(year-1979) + (double)(month-1) + day / daysPerMonth(year, month);
		this.year = year;
		this.month = month;
	}
	void setTime(int year, int month, double day) {
		time = 12d * (double)(year-1979) + (double)(month-1) + day / daysPerMonth(year, month);
		this.year = year;
		this.month = month;
		this.day = day;
	}
	public double getTime() {
		return time;
	}
	public Calendar getDate() {
		return new GregorianCalendar(year, month-1, (int)(day+1));
	}
	public void setMonthStep(double months) {
		mStep = months;
		dStep = Double.NaN;
	}
	public void setDayStep(double days) {
		mStep = Double.NaN;
		dStep = days;
		int i = (int)time;
		year = 1979 + i/12;
		month = i - (year-1979)*12 + 1;
//	System.out.println(time +"\t"+ year +"\t"+ month);
		day = (time - (double)i) * daysPerMonth(year,month);
	}
	public static double daysPerMonth(int year, int month) {
		double dpm = dayTab[month-1];
		if(month == 2 && year%4 == 0)dpm+=1d;
		return dpm;
	}
	public void timeStep() {
		if(Double.isNaN(dStep)) {
			time += mStep;
		} else {
			day += dStep;
			double dpm;
			if(dStep > 0d) {
				dpm = daysPerMonth(year, month);
				while(day >= dpm) {
					day -= dpm;
					month++;
					if(month == 13) {
						year++;
						month=1;
					}
					dpm = daysPerMonth(year, month);
				}
			} else {
				while(day < 0d) {
					month--;
					if(month == 0) {
						month = 12;
						year--;
					}
					dpm = daysPerMonth(year, month);
					day += dpm;
				}
			}
			setTime(year, month, day);
		}
	}
	public boolean step() {
		double time0 = time;
		timeStep();
		double t, dt;
		t = Math.floor(time0);
		if(time>time0) {
			t++;
			dt = 1;
		} else {
			if(time0 == t)t--;
			dt = -1;
		}
		do {
			if(t*dt > time*dt) t = time;
			int k = (int)Math.floor(Math.min(t,time0));
			if(k<0 || k>=226) return false;
			double[] uv = getUV(point, k);
			if(uv == null) return false;
			double tdiff = t-time0;
			Point2D p = new Point2D.Double(point.x+tdiff*uv[0], point.y+tdiff*uv[1]);
			double[] uv1 = getUV(p, k);
			if(uv1 == null) return false;
			uv[0] = .5d * uv[0] + .5d * uv1[0];
			uv[1] = .5d * uv[1] + .5d * uv1[1];
//	System.out.println(tdiff +"\t"+ uv[0] +"\t"+ uv[1]);
			point.x += tdiff*uv[0];
			point.y += tdiff*uv[1];
			time0 = t;
			t += dt;
		} while(dt*time0 < dt*time);
		return true;
	}
	public static double[] getUV(Point2D p, int k) {
		int x = (int)Math.floor(p.getX());
		int y = (int)Math.floor(p.getY());
		if(x<0 || x>=40 || y<0 || y>=28) return null;
		double dx = p.getX() - (double)x;
		double dy = p.getY() - (double)y;
		double dxy = dx*dy;
		double[] uv = new double[2];
		uv[0] = u[k][y][x] *(1d - dx -dy + dxy)
			+ u[k][y][x+1] * (dx - dxy)
			+ u[k][y+1][x] * (dy - dxy)
			+ u[k][y+1][x+1] *dxy;
		uv[1] = v[k][y][x] *(1d - dx -dy + dxy)
			+ v[k][y][x+1] * (dx - dxy)
			+ v[k][y+1][x] * (dy - dxy)
			+ v[k][y+1][x+1] *dxy;
		return uv;
	}
	public void setPoint(Point2D p) {
		point.setLocation(p);
	}
	public void setLonLat(Point2D lonlat) {
		point.setLocation(proj.getMapXY(lonlat));
	}
	public Point2D getPoint() {
		return new Point2D.Double(point.x, point.y);
	}
	public Point2D getLonLat() {
		return proj.getRefXY(point);
	}
	public Projection getProjection() {
		return proj;
	}
}
