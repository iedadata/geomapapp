package haxby.db.dig;

import haxby.map.*;
import haxby.proj.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.*;
import javax.swing.*;

public class TextObject implements DigitizerObject,
					MouseListener,
					MouseMotionListener,
					KeyListener {
	XMap map;
	Digitizer dig;
	String text;
	boolean visible;
	double wrap;
	String name;
	float lineWidth;
	Color color;
	Color fill;
	Color lastColor, lastFill;
	BasicStroke stroke;
	boolean selected;
	long when;
	GeneralPath editShape;
	boolean active;
	static ImageIcon icon = Digitizer.TEXT(false);
	static ImageIcon invisibleIcon = Digitizer.TEXT(true);
	static Cursor cursor = Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);
	public TextObject( XMap map, Digitizer dig ) {
		this.map = map;
		wrap = map.getWrap();
		this.dig = dig;
		points = new Vector();
		visible = true;
		name = null;
		selected = false;
		lineWidth = 1f;
		color = Color.black;
	//	selectColor = new Color( 120, 40, 40 );
		when = 0L;
		editShape = null;
		active = false;
		fill = Color.black;
		color = null;
		lastColor = color;
		lastFill = Color.white;
		stroke = new BasicStroke( 1f );
		text = "";
	}
	public void setName(String name) {
		this.name = name;
	}
	public String toString() {
		if( name==null) {
			return "Text";
		}
		return name;
	}
	public Color getColor() {
		return color;
	}
	public Color getFill() {
		return fill;
	}
	public void setColor( Color c ) {
		if( c==null ) {
			if( color==null ) {
				color = lastColor;
			} else {
				lastColor = color;
				color = c;
			}
			return;
		}
		color = c;
	}
	public void setFill( Color c ) {
		if( c==null ) {
			if( fill==null ) {
				fill = lastFill;
			} else {
				lastFill = fill;
				fill = c;
			}
			return;
		}
		fill = c;
	}
	public BasicStroke getStroke() {
		return stroke;
	}
	public void setStroke( BasicStroke s ) {
		stroke = s;
	}
	public void start() {
		map.addMouseListener( this );
		map.addMouseMotionListener( this );
		map.setCursor( cursor );
		active = true;
	}
	public boolean finish() {
		active = false;
		drawSeg();
		map.removeMouseListener( this );
		map.removeMouseMotionListener( this );
		map.setCursor( Cursor.getDefaultCursor() );
		if( points.size()<=1 ) return false;
		return true;
	}
	public void setVisible( boolean tf ) {
		visible = tf;
	}
	public boolean isVisible() {
		return visible;
	}
	public boolean select( double x, double y ) {
		if( points.size()<=1 )return false;
		Rectangle2D.Double bounds = (Rectangle2D.Double)computeBounds();
		double r = 2.5/map.getZoom();
		bounds.x -= r;
		bounds.y -= r;
		bounds.width += 2.*r;
		bounds.height += 2.*r;
		if( wrap>0. ) {
			while( bounds.x>x ) x += wrap;
			while( bounds.x+bounds.width<x ) x -= wrap;
		}
		if( !bounds.contains( x, y ) )return false;
		double x1, y1, x2, y2, dx0, dy0, dx, dy, r0, r1, test;;
		Point2D.Double p = (Point2D.Double)points.get(0);
		x1 = p.x;
		y1 = p.y;
		double rMin = 100000.;
		r *= r;
		for( int i=1 ; i<points.size() ; i++) {
			p = (Point2D.Double)points.get(i);
			x2 = p.x;
			y2 = p.y;
			if(x1==x2 && y1==y2) continue;
			dx0 = x2-x1;
			dy0 = y2-y1;
			dx = x-x1;
			dy = y-y1;
			r0 = dx0*dx0 + dy0*dy0;
			test = dx*dx0 + dy*dy0;
			x1 = x2;
			y1 = y2;
			if(test<0) {
				r1 = dx*dx + dy*dy;
			} else if( test>r0 ) {
				dx -= dx0;
				dy -= dy0;
				r1 = dx*dx + dy*dy;
			} else {
				r1 = -dx*dy0 + dy*dx0;
				r1 *= r1/r0;
			}
			if( r1<rMin ) rMin = r1;
			if( r1>r ) continue;
			return true;
		}
		return false;
	}
	public Rectangle2D computeBounds() {
		Rectangle2D.Double bounds = new Rectangle2D.Double();
		if( points.size()==0 ) return bounds;
		Point2D.Double p = (Point2D.Double)points.get(0);
		bounds.x = p.x;
		bounds.y = p.y;
		for( int i=1 ; i<points.size() ; i++ ) {
			p = (Point2D.Double)points.get(i);
			if( p.x<bounds.x ) {
				bounds.width += bounds.x-p.x;
				bounds.x = p.x;
			} else if( p.x>bounds.x+bounds.width ) {
				bounds.width = p.x-bounds.x;
			}
			if( p.y<bounds.y ) {
				bounds.height += bounds.y-p.y;
				bounds.y = p.y;
			} else if( p.y>bounds.y+bounds.height ) {
				bounds.height = p.y-bounds.y;
			}
		}
		return bounds;
	}
	public void setSelected( boolean tf ) {
		if( selected == tf ) return;
		if( !selected ) {
			map.addMouseListener(this);
			map.addMouseMotionListener(this);
		} else {
			map.removeMouseListener(this);
			map.removeMouseMotionListener(this);
		}
		selected = tf;
	}
	public boolean isSelected() {
		return selected;
	}
	public Icon getIcon() {
		return icon;
	}
	public Icon getDisabledIcon() {
		return invisibleIcon;
	}
	public void draw( java.awt.Graphics2D g ) {
		if( !visible || points.size()<=1 ) return;
		lineWidth = stroke.getLineWidth();
		g.setStroke( new BasicStroke( lineWidth/(float)map.getZoom() ));
	//	if( selected ) {
	//		g.setColor( selectColor );
	//	} else {
	//		g.setColor( color );
	//	}
		GeneralPath path = new GeneralPath();
		Point2D.Double p = (Point2D.Double)points.get(0);
		double min = p.x;
		double max = p.x;
		path.moveTo( (float)p.getX(), (float)p.getY() );
		GeneralPath path1 = new GeneralPath();
		double dx = 2./map.getZoom();
		if( selected ) path1.append( new Rectangle2D.Double( p.getX()-dx, p.getY()-dx, 2*dx, 2*dx), false);
		for(int i=1 ; i<points.size() ; i++) {
			p = (Point2D.Double)points.get(i);
			if( p.x>max ) max=p.x;
			else if( p.x<min ) min=p.x;
			path.lineTo( (float)p.getX(), (float)p.getY() );
			if( selected ) path1.append( new Rectangle2D.Double( p.getX()-dx, p.getY()-dx, 2*dx, 2*dx), false);
		}
		if( wrap>0. ) {
			AffineTransform at = g.getTransform();
			Rectangle2D rect = map.getClipRect2D();
			double offset = 0.;
			while( min+offset>rect.getX() ) offset -= wrap;
			while( max+offset< rect.getX() ) offset += wrap;
			g.translate( offset, 0.);
			while( min+offset < rect.getX()+rect.getWidth() ) {
				if( fill != null ) {
					g.setColor(fill);
					g.fill( path );
				}
				if( color!=null ) {
					g.setColor(color);
					g.draw( path );
				}
				offset += wrap;
				g.translate( wrap, 0.);
			}
			g.setTransform( at);
		} else {
			if( fill != null ) {
				g.setColor(fill);
				g.fill( path );
			}
			if( color!=null ) {
				g.setColor(color);
				g.draw( path );
			}
		}
		if( !selected ) return;
		g.setXORMode( Color.white );
		g.setStroke( new BasicStroke( 1f/(float)map.getZoom() ));
		if( wrap>0. ) {
			AffineTransform at = g.getTransform();
			Rectangle2D rect = map.getClipRect2D();
			double offset = 0.;
			while( min+offset>rect.getX() ) offset -= wrap;
			while( max+offset< rect.getX() ) offset += wrap;
			g.translate( offset, 0.);
			while( min+offset < rect.getX()+rect.getWidth() ) {
				g.draw( path );
				g.draw( path1 );
				offset += wrap;
				g.translate( wrap, 0.);
			}
			g.setTransform( at);
		} else {
			g.draw( path );
			g.draw( path1 );
		}
		g.setPaintMode();
	}
	public void mouseEntered( MouseEvent evt ) {
		mouseMoved(evt);
	}
	public void mouseExited( MouseEvent evt ) {
	}
	public void mousePressed( MouseEvent evt ) {
		if( evt.isControlDown() || !selected ) return;
		double zoom = map.getZoom();
		double r = 2.5/zoom;
		Point2D.Double p = (Point2D.Double)map.getScaledPoint( evt.getPoint() );
		double wrap = map.getWrap();
		for( int i=0 ; i<points.size() ; i++) {
			Point2D.Double pt = (Point2D.Double)points.get(i);
			if( p.y<pt.y-r || p.y>pt.y+r )continue;
			if( wrap>0. ) {
				while( p.x<pt.x-wrap/2. ) p.x+=wrap;
				while( p.x>pt.x+wrap/2. ) p.x-=wrap;
			}
			if( p.x<pt.x-r || p.x>pt.x+r )continue;
			when = evt.getWhen();
			mouseDragged( evt );
			return;
		}
	}
	public void mouseReleased( MouseEvent evt ) {
		if( editShape==null ) {
			currentPoint = -1;
			return;
		}
		drawEdit();
		editShape = null;
		if( evt.isControlDown() || evt.getWhen()-when<500L ) {
			currentPoint = -1;
			return;
		}
		Point2D.Double p = (Point2D.Double)map.getScaledPoint( evt.getPoint() );
		Point2D.Double p1 = (Point2D.Double) points.get( currentPoint );
		p1.x = p.x;
		p1.y = p.y;
		map.repaint();
	}
	public void mouseClicked( MouseEvent evt ) {
		if(!active || evt.isControlDown())return;
		drawSeg();
		Point2D.Double p = (Point2D.Double)map.getScaledPoint( evt.getPoint() );
		if( points.size()>0 && wrap>0. ) {
			Point2D.Double p1 = (Point2D.Double)points.get(points.size()-1);
			while (p.x>p1.x+wrap/2.) p.x -= wrap;
			while (p.x<p1.x-wrap/2.) p.x += wrap;
		}
		points.add( p );
		redraw();
	}
	public boolean isActive() {
		return active;
	}
	public void redraw() {
		synchronized( map.getTreeLock() ) {
			draw( map.getGraphics2D() );
		}
	}
	public void mouseMoved( MouseEvent evt ) {
		if(selected || evt.isControlDown())return;
		if( map.getCursor() != cursor ) map.setCursor( cursor );
	}
	public void mouseDragged( MouseEvent evt ) {
		if( currentPoint < 0)return;
		drawEdit();
		if( evt.isControlDown() ) {
			currentPoint=-1;
			return;
		}
		editShape = new GeneralPath();
		Point2D.Double p0 = (Point2D.Double)map.getScaledPoint( evt.getPoint() );
		if( currentPoint!=0 ) {
			editShape.append(new Line2D.Double( p0, (Point2D.Double) points.get(currentPoint-1)), false);
		}
		if( currentPoint!=points.size()-1 ){
			editShape.append(new Line2D.Double( p0, (Point2D.Double) points.get(currentPoint+1)), false);
		}
		double r = 2.5/map.getZoom();
		editShape.append( new Rectangle2D.Double( p0.x-r, p0.y-r, 2.*r, 2.*r ), false);
		drawEdit();
	}
	public void keyPressed( KeyEvent evt ) {
	}
	public void keyReleased( KeyEvent evt ) {
	}
	public void keyTyped( KeyEvent evt ) {
	}
}
