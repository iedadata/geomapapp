package haxby.db.pmel;

import haxby.util.*;
import haxby.map.*;

import java.util.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class EventAnimator extends JComponent 
			implements Zoomable,
				KeyListener,
				Runnable,
				ActionListener {
	PMEL pmel;
	double[] zRange;
	EventHistogram zHist;
	int side;
	int lastX;
	int minX, maxX, middle;
	Calendar cal;
	JPanel panel;
	JTextField frameRate;
	JToggleButton play;
	boolean running;
	int currentFrame;
	static Color[] color = new Color[] {
					Color.black,
					new Color(96,0,0),
					new Color(128,0,0),
					new Color(160,0,0),
					new Color(192,0,0),
					new Color(224,0,0),
					new Color(255,0,0),
					new Color(255,64,0),
					new Color(255,128,0),
					new Color(255,192,0)
				};

	public EventAnimator( PMEL pmel, EventHistogram hist ) {
		this.pmel = pmel;
		setHist( hist );
		cal = Calendar.getInstance( TimeZone.getTimeZone("GMT") );
		Zoomer zoomer = new Zoomer(this);
		addMouseListener(zoomer);
		addMouseMotionListener(zoomer);
		addKeyListener(zoomer);
		panel = new JPanel( new BorderLayout() );
		JPanel panel1 = new JPanel( new GridLayout(0,1) );
		JButton button = new JButton("reset");
		panel1.add( button );
		button.addActionListener( this);
		play = new JToggleButton("play");
		panel1.add( play );
		panel1.add( new JLabel( "frames/sec" ));
		frameRate = new JTextField("10");
		panel1.add(frameRate);
		play.addActionListener( this);
		panel.add( panel1, "West");
		panel.add(this,"Center");
		running = false;
		currentFrame = 0;
	}
	public JPanel getPanel() {
		return panel;
	}
	public void setHist( EventHistogram hist ) {
		zHist = hist;
		zRange = hist.getRange();
		enableEvents(AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
		side = 0;
		lastX = -1;
		minX = maxX = middle = 0;
		if( getParent() != null)repaint();
	}
	void drawLine() {
		synchronized (getTreeLock()) {
			Graphics2D g = (Graphics2D)getGraphics();
			Dimension dim = getSize();
			g.setXORMode( Color.white );
			g.drawLine(lastX,0,lastX,dim.height);
		}
	}
	public Dimension getMinimumSize() {
		return new Dimension( 100, 40 );
	}
	int nearbyTest( int x ) {
		if( x- minX < 3 && x-minX > -3 ||
				x- maxX < 3 && x-maxX > -3 ) {
			return (x- minX < 3) ? -1 : 1;
		}
		if(side!=0)setCursor( Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR) );
		return 0;
	}
	public void processMouseEvent( MouseEvent evt ) {
		super.processMouseEvent( evt );
		if( evt.isControlDown() )return;
		if( side==0 ) {
			if( evt.getID()==evt.MOUSE_ENTERED) {
				requestFocus();
				int x = evt.getX();
				side = nearbyTest(x);
				if(side == 0) return;
				setCursor( Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR) );
			}
			return;
		}
		if( evt.getID()==evt.MOUSE_PRESSED) {
			int x = evt.getX();
			lastX=x;
			drawLine();
		} else if( evt.getID()==evt.MOUSE_EXITED) {
			drawLine();
			side = 0;
			setCursor( Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR) );
			lastX = -1;
		} else if( evt.getID()==evt.MOUSE_RELEASED) {
			if(side==-1) {
				zRange[0] = zRange[0] + 
					(zRange[1]-zRange[0]) * (lastX-minX)
					/ ( maxX-minX );
			} else {
				zRange[1] = zRange[0] + 
					(zRange[1]-zRange[0]) * (lastX-minX)
					/ ( maxX-minX );
			}
			double dx = (zRange[1]-zRange[0])/(maxX-minX);
			zHist.setRange( zRange, dx*4. );
			pmel.map.repaint();
		}
	}
	public void processMouseMotionEvent( MouseEvent evt ) {
		super.processMouseMotionEvent( evt );
		if( evt.isControlDown() )return;
		if( evt.getID()==evt.MOUSE_MOVED ) {
			int x = evt.getX();
			side = nearbyTest(x);
			if(side == 0) return;
			setCursor( Cursor.getPredefinedCursor(Cursor.W_RESIZE_CURSOR) );
		} else if( evt.getID()==evt.MOUSE_DRAGGED ) {
			if( side==0 ) return;
			int x=evt.getX();
			if(side==1&&x-minX<10) return;
			if(side==-1&&maxX-x<10) return;
			drawLine();
			lastX = x;
			drawLine();
		}
	}
	public void paint( Graphics g ) {
		Graphics2D g2 = (Graphics2D)g;
		Dimension dim = getSize();
		g.setColor( Color.white );
		g.fillRect( 0, 0, dim.width, dim.height );
		middle = dim.width / 2;
		minX = middle - dim.width/3;
		maxX = middle + dim.width/3;
		double z0 = zRange[0] - .25*( zRange[1]-zRange[0]);
		double dz = 1.5 * ( zRange[1] - zRange[0] ) / dim.width;
		double scale = ((double)dim.height-15) / (double)zHist.getMaxCounts();
		double z;
		GeneralPath path = new GeneralPath();
		path.moveTo( 0f, (float)dim.width);
		XYZ grad = new XYZ(0.,0.,1.);
		for( int i=0 ; i<dim.width ; i++ ) {
			z = z0 + (double)i * dz;
			int y =  dim.height-15 - 
					(int)(scale* (double)zHist.getCounts((float)z));
			Rectangle  r = new Rectangle( i, y, 1, dim.height-15-y);
		//	g.setColor( rgb );
			g.setColor( Color.gray );
			g2.fill( r );
			path.lineTo( (float)i, (float)y);
		}
		g.setColor( Color.black );
		g2.draw( path );
		String val = dateString(zRange[0]);
		Rectangle2D bounds = g2.getFont().getStringBounds( val, g2.getFontRenderContext() );
		int x = minX - (int) (bounds.getWidth()/2.);
		g2.drawString( val, x, 12 );
		val = dateString(zRange[1]);
		bounds = g2.getFont().getStringBounds( val, g2.getFontRenderContext() );
		x = maxX - (int) (bounds.getWidth()/2.);
		g2.drawString( val, x, 12 );
		g.drawLine( 0, dim.height-15, dim.width, dim.height-15);
		g.setColor( new Color( 0,0,0,100) );
		g.drawLine( minX, 0, minX, dim.height-15);
		g.drawLine( maxX, 0, maxX, dim.height-15);
		int t1 = (int) zRange[0];
	}
	String dateString( double secs ) {
		cal.setTime( new Date( (long)(secs*1000) ));
		int yr = cal.get(cal.YEAR);
		int day = cal.get(cal.DAY_OF_YEAR);
		int hr = cal.get(cal.HOUR_OF_DAY);
		int min = cal.get(cal.MINUTE);
		StringBuffer buf = new StringBuffer();
		buf.append( yr + "/" );
		if( day<10 ) buf.append(0);
		if( day<100 ) buf.append(0);
		buf.append(day+"/");
		if( hr<10 )buf.append(0);
		buf.append(hr);
		if(min<10)buf.append(0);
		buf.append(min);
		return buf.toString();
	}
	public void setXY(Point p){
	}
	public void setRect(Rectangle rect) {
	}
	public void zoomTo(Rectangle rect) {
	}
	public void zoomIn(Point p) {
		doZoom( p.x, 2.);
	}
	public void zoomOut(Point p) {
		doZoom( p.x, .5);
	}
	void doZoom( int x, double factor) {
		double range = zRange[1]-zRange[0];
		double p = zRange[0] +range*(x-minX)
				/ ( maxX-minX );
		zRange = new double[] { p-range*.5/factor, p+range*.5/factor };
		double dx = (zRange[1]-zRange[0])/(maxX-minX);
		zHist.setRange( zRange, dx*4. );
		pmel.map.repaint();
	}
	public void run() {
		while( running ) step();
	}
	void step() {
		synchronized( pmel.map.getTreeLock() ) {
			Graphics2D g = pmel.map.getGraphics2D();
			Rectangle2D.Double clip = (Rectangle2D.Double)pmel.map.getClipRect2D();
			double dx = (zRange[1]-zRange[0])/(maxX-minX);
			double t = zRange[0];
			int kount=0;
			Vector data = pmel.current;
			double zoom = pmel.map.getZoom();
			double wrap = pmel.map.getWrap();
			Rectangle2D.Double rect = new Rectangle2D.Double(-2./zoom, -2./zoom,
									4./zoom, 4./zoom);
			AffineTransform at = g.getTransform();
			g.setColor( Color.black );
			for(int i=0 ; i<data.size() ; i++) {
				PMELEvent evt = (PMELEvent)data.get(i);
				while( evt.x<clip.x ) evt.x-=wrap;
				while( evt.x>clip.x+clip.width ) evt.x-=wrap;
				g.translate( (double)evt.x, (double)evt.y );
				g.fill( rect );
				g.setTransform( at );
			}
			long delay;
			try {
				delay = 1000L / Long.parseLong( frameRate.getText() );
			} catch(NumberFormatException ex) {
				delay = 100L;
			}
		//	while( play.isSelected() ) {
				Vector[] plot = new Vector[10];
				for(int k=0 ; k<10 ; k++)plot[k] = new Vector();
				long time = System.currentTimeMillis();
				kount=0;
				int x = -1;
				int h = getSize().height;
				while( t<zRange[1] ) {
					for( int k=0 ; k<10 ; k++) {
						g.setColor( color[k] );
						for(int i=0 ; i<plot[k].size() ; i++) {
							PMELEvent evt = (PMELEvent)plot[k].get(i);
							while( evt.x<clip.x ) evt.x-=wrap;
							while( evt.x>clip.x+clip.width ) evt.x-=wrap;
							g.translate( (double)evt.x, (double)evt.y );
							g.fill( rect );
							g.setTransform( at );
						}
						plot[k].removeAllElements();
						if(k<9) {
							for(int i=0 ; i<plot[k+1].size() ; i++) {
								plot[k].add(plot[k+1].get(i));
							}
						}
					}
					t+=dx*4;
					Graphics gg = getGraphics();
					gg.setXORMode( Color.yellow );
					if( x>0 ) gg.drawLine( x,0,x,h );
					x = minX + (int) ( (t-zRange[0]) * (maxX-minX)/(zRange[1]-zRange[0]));
					gg.drawLine( x,0,x,h );
					g.setColor( Color.yellow );
					while( kount<data.size() ) {
						if( !play.isSelected() ) return;
						PMELEvent evt = (PMELEvent)data.get(kount);
						if( evt.time>t )break;
						while( evt.x<clip.x ) evt.x-=wrap;
						while( evt.x>clip.x+clip.width ) evt.x-=wrap;
						g.translate( (double)evt.x, (double)evt.y );
						g.fill( rect );
						g.setTransform( at );
						plot[9].add( evt);
						kount++;
					}
					long now = System.currentTimeMillis();
					if( now-time<delay ) try {
						Thread.currentThread().sleep( delay-(now-time) );
					} catch(Exception ex) {
					}
					time = now;
				}
					Graphics gg = getGraphics();
					gg.setXORMode( Color.yellow );
					if( x>0 ) gg.drawLine( x,0,x,h );
				for( int j=0 ; j<10 ; j++) {
					for( int k=0 ; k<10 ; k++) {
						g.setColor( color[k] );
						for(int i=0 ; i<plot[k].size() ; i++) {
							PMELEvent evt = (PMELEvent)plot[k].get(i);
							while( evt.x<clip.x ) evt.x-=wrap;
							while( evt.x>clip.x+clip.width ) evt.x-=wrap;
							g.translate( (double)evt.x, (double)evt.y );
							g.fill( rect );
							g.setTransform( at );
						}
						plot[k].removeAllElements();
						if(k<9) {
							for(int i=0 ; i<plot[k+1].size() ; i++) {
								plot[k].add(plot[k+1].get(i));
							}
						}
					}
				}
		//	}
			play.setSelected( false );
		}
	}
	public void actionPerformed(ActionEvent evt) {
		if( evt.getActionCommand().equals("reset")) {
		} else if(evt.getSource()==play) {
			if( play.isSelected() ) {
				init();
				running = true;
				(new Thread(this)).start();
			}
		}
	}
	public void keyPressed(KeyEvent evt) {
	}
	public void keyTyped(KeyEvent evt) {
	}
	public void keyReleased(KeyEvent evt) {
		if( !play.isSelected() ) return;
		if( running ) {
			running=false;
			return;
		}
	}
}
