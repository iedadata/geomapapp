package org.geomapapp.grid;

import org.geomapapp.image.*;

import haxby.proj.*;
import haxby.map.*;

import java.text.NumberFormat;
import java.io.*;
import java.awt.image.*;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;

public class Grid2DOverlay extends MapOverlay {
	Grid2D grid;
	Grid2D.Boolean landMask;
	ContourGrid contour;
	Point2D p0;
	double gridScale;
//	LUTTool lut;
	RenderingTools lut;
	boolean land, ocean;
	public Grid2DOverlay( XMap map ) {
		super(map);
		grid = null;
		lut = null;
		contour = new ContourGrid( this );
	}
	double interval;
	int[] reviseContours(int[] c, double interval) {
		NumberFormat fmt = NumberFormat.getInstance();
		fmt.setMaximumFractionDigits(0);
		fmt.setGroupingUsed(false);
		JPanel panel = new JPanel(new GridLayout(0, 1));
		JTextField c1 = new JTextField(fmt.format(c[0]*interval));
		JTextField c2 = new JTextField(fmt.format(c[1]*interval));
		JTextField con = new JTextField(fmt.format(interval));
		JLabel label = new JLabel("Modify contour interval and/or range?");
		panel.add(label);
		JPanel p1 = new JPanel( new GridLayout(1,0));
		label = new JLabel("Interval", label.CENTER);
		p1.add( label );
		p1.add( con );
		panel.add(p1);
		p1 = new JPanel( new GridLayout(1,0));
		label = new JLabel("Minimum", label.CENTER);
		p1.add( label );
		p1.add( c1 );
		panel.add(p1);
		p1 = new JPanel( new GridLayout(1,0));
		label = new JLabel("Maximum", label.CENTER);
		p1.add( label );
		p1.add( c2 );
		panel.add(p1);
		String title = "Modify Contours?";
		while(true) {
			int ok = JOptionPane.showConfirmDialog(
				lut, panel, 
				title,
				JOptionPane.YES_NO_CANCEL_OPTION,
				JOptionPane.PLAIN_MESSAGE);
			if( ok==JOptionPane.CANCEL_OPTION ) {
				this.interval=-1;
				return c;
			} else if(ok==JOptionPane.NO_OPTION ) {
				this.interval = interval;
				return c;
			}
			title = "try again";
			try {
				double val = Double.parseDouble(con.getText());
				if( val <=0.) return c;
				double min = Double.parseDouble(c1.getText());
				double max = Double.parseDouble(c2.getText());
				c[0] = (int)Math.ceil(min/val);
				c[1] = (int)Math.ceil(max/val);
				this.interval = val;
				return c;
			} catch(Exception ex) {
			}
		}
	}
	public void contourGrid( double interval ) {
		if( grid==null )return;
		if( interval <= 0 ) {
			if( !contour.isVisible() ) return;
			contour.setVisible( false );
		} else {
			if( interval != getInterval() ) {
				double[] range = grid.getRange();
				int[] c = new int[] {
					(int)Math.ceil(range[0]/interval),
					(int)Math.floor(range[1]/interval)
				};
				c = reviseContours(c, interval);
				interval = this.interval;
				if( interval <= 0 ) {
					if( !contour.isVisible() ) return;
					contour.setVisible( false );
					return;
				}
				contour.contour( interval, c );
			}
			contour.setVisible( true );
		}
		map.repaint();
	}
	public double getInterval() {
		return contour.getInterval();
	}
	public boolean isVisible() {
		return contour.isVisible();
	}
        public void setGrid( Grid2D grid,
                        Grid2D.Boolean landMask,
                        boolean hasLand,
                        boolean hasOcean ) {
                setGrid( grid, landMask, hasLand, hasOcean, true);
        }
        public void setGrid( Grid2D grid,
                        Grid2D.Boolean landMask,
                        boolean hasLand,
                        boolean hasOcean,
                        boolean reset ) {
		this.landMask = landMask;
		land = hasLand;
		ocean = hasOcean;
		if( this.grid==null && grid==null)return;
		this.grid = grid;
		if( grid==null ) return;
		if( !reset ) return;
		Rectangle r = grid.getBounds();
		p0 = new Point2D.Double(r.getX(), r.getY());
		p0 = map.getProjection().getMapXY( grid.getProjection().getRefXY(p0));
		Point2D p1 = new Point2D.Double(r.getX()+1., r.getY());
		p1 = map.getProjection().getMapXY( grid.getProjection().getRefXY(p1));
		if( p1.getX()<p0.getX() ) {
			gridScale = p1.getX()+map.getWrap()-p0.getX();
		} else {
			gridScale = p1.getX() - p0.getX();
		}
		contour.setGrid(grid);
		if( lut==null ) initRenderer();
		lut.setNewGrid();
		lut.showDialog();
	}
	public boolean hasLand() {
		return land;
	}
	public boolean hasOcean() {
		return ocean;
	}
	void initRenderer() {
		lut = new RenderingTools(this);
	}
	public double getScale() {
		return gridScale;
	}
	public double[] getOffsets() {
		return new double[] { p0.getX(), p0.getY() };
	}
	public Grid2D getGrid() {
		return grid;
	}
	public Grid2D.Boolean getLandMask() {
		return landMask;
	}
	public float getZ( Point2D p ) {
		if( grid==null ) return Float.NaN;
		double wrap = map.getWrap();
		Point2D pt = grid.getProjection().getMapXY(p);
		if( wrap>0. ) {
			wrap /= gridScale;
			double x = pt.getX();
			Rectangle r = grid.getBounds();
			while( x<r.x )x+=wrap;
			while( x>r.x+r.width ) x-=wrap;
			pt.setLocation( x, pt.getY() );
		}
		float z = (float)grid.valueAt( (int)pt.getX(), (int)pt.getY());
//	System.out.println( pt.getX() +"\t"+ pt.getY() 
//			+"\t"+ grid.contains( (int)pt.getX(), (int)pt.getY())
//			+"\t"+ z);
		return z;
	}
	public void draw(Graphics2D g) {
		g.setColor( Color.black );
		g.setStroke( new BasicStroke(1f/(float)map.getZoom()));
		AffineTransform at = g.getTransform();
		Rectangle2D.Double rect = (Rectangle2D.Double) map.getClipRect2D();
		double wrap = map.getWrap();
		if( !mask || !contour.isVisible() ) {
			super.draw(g);
			if( contour.isVisible() ) {
				if( wrap>0 ) {
					double x = p0.getX();
					while( x>rect.x ) {
						g.translate(-wrap, 0.);
						x -= wrap;
					}
					while( x<rect.x+rect.width ) {
						contour.draw(g);
						g.translate(wrap, 0.);
						x += wrap;
					}
				} else {
					contour.draw(g);
				}
				g.setTransform(at);
			}
			return;
		}
		super.drawImage( g );
		if( contour.isVisible() ) {
			if( wrap>0 ) {
				double x = p0.getX();
				while( x>rect.x ) {
					g.translate(-wrap, 0.);
					x -= wrap;
				}
				while( x<rect.x+rect.width ) {
					contour.draw(g);
					g.translate(wrap, 0.);
					x += wrap;
				}
			} else {
				contour.draw(g);
			}
			g.setTransform(at);
		}
		super.drawMask( g );
	}
	
	/**
	 	Save the grid.
	 */
	 public void saveGrid(File file) throws IOException {
		 PrintStream out = new PrintStream(
		 		new FileOutputStream(file));
		 
		 Rectangle rect = grid.getBounds();
		 Point p = new Point();
		 
		 for (int y=rect.y; y < rect.y+rect.height; y++)
		 {
		 	p.y = y;
		 	for (int x=rect.x; x<rect.x+rect.width; x++)
		 	{
		 		p.x = x;
		 		Point2D p2 = grid.getProjection().getRefXY(p);
		 		out.println(p2.getX() + "\t" +
		 					p2.getY() + "\t" +
		 					grid.valueAt(x,y));
		 	}
		 }
			
	 	out.close();
	}
	public void saveGrd( File file ) throws IOException {
		try {
			NetCDFGrid2D.createStandardGrd( grid, file );
		} catch(IOException ex) {
			ex.printStackTrace();
			throw ex;
		}
	}
	public void saveMaskedGrd( File file ) throws IOException {
		throw new IOException("CDF IO not yet available");
/*
		ScaledProjection proj0 = (ScaledProjection)grid.getProjection();
		Projection proj = proj0.getParent();
		Point2D pt = proj.getMapXY( new Point2D.Double(0.,0.) );
		double x = pt.getX();
		pt = proj.getMapXY( new Point2D.Double(1.,0.) );
		int res = (int)Math.rint( 1024.*320. / ((pt.getX()-x)*360.) );
		int nLevel = 0;
		int nGrid = 1024/res;
		while( nGrid>8 ) {
			nLevel++;
			nGrid /= 8;
		}
		int[] bounds = grid.getBounds();
		URLMasker masker = new URLMasker( 320, res, 1, nLevel, proj, 
				MGridServer.getBaseURL()+"merc_320_1024" );
		Mask mask = new Mask( bounds[0], bounds[1], bounds[2]-bounds[0], bounds[3]-bounds[1], masker);
		NetCDFGrid.createStandardGrd( grid, mask, file );
*/
	}
	 public void saveGrid() throws IOException
	 {
	 	if (grid == null)
	 	{
	 		JOptionPane.showMessageDialog( map.getTopLevelAncestor(), "No grid loaded");
	 		return;
	 	}
	 	
	 	int confirm = JOptionPane.NO_OPTION;
	 	File file = null;
	 	while (confirm == JOptionPane.NO_OPTION)
	 	{
		 	JFileChooser chooser = MapApp.getFileChooser();
		 	int ok = chooser.showSaveDialog(map.getTopLevelAncestor());
		 	
		 	if (ok == chooser.CANCEL_OPTION)
		 		return;
		 	
		 	file = chooser.getSelectedFile();
		 	
		 	if (file.exists()) {
		 		confirm = JOptionPane.showConfirmDialog( map.getTopLevelAncestor(), 
							"File exists, Overwrite?");
				if( confirm == JOptionPane.CANCEL_OPTION ) return;
		 	} else {
		 		break;
			}
		 }
		 saveGrid( file );
	 }
}
