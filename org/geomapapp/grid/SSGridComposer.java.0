package org.geomapapp.grid;

import org.geomapapp.geom.MapProjection;
import haxby.proj.*;
import haxby.map.*;

import com.sun.image.codec.jpeg.*;
import java.net.*;
import java.io.*;
import java.awt.Rectangle;
import java.awt.Point;
import java.awt.geom.*;
import java.awt.image.BufferedImage;

public class SSGridComposer {
//	static String base = "/local/data/home/bill/db/merc_320_1024/";
	static String base = "http://ocean-ridge.ldeo.columbia.edu/MapApp/gravity/";
//	static String base = "/scratch/antarctic/bill/srtm/3arcsec/africa/merc_320_1024/";
	public static void setBaseURL( String baseURL ) {
		base = baseURL;
		if(!base.endsWith("/")) base += "/";
	}
        public static boolean getGrid(Rectangle2D rect,
                                Grid2DOverlay overlay,
                                int mapRes) {
                double zoom = overlay.getXMap().getZoom();
                return getGrid( rect, overlay, mapRes, zoom, true);
        }
        public static boolean getGrid(Rectangle2D rect,
                                Grid2DOverlay overlay,
                                int mapRes, double zoom) {
                return getGrid( rect, overlay, mapRes, zoom, false);
        }
        public static boolean getGrid(Rectangle2D rect,
                                Grid2DOverlay overlay,
                                int mapRes, double zoom, boolean reset) {
		XMap map = overlay.getXMap();
		int size = 675;
		int res = mapRes;
		while(zoom*res/mapRes > 1.5 && res>1) {
			res /=2;
		}
		int scale = mapRes/res;
		Mercator proj = new Mercator(.008333333, 72.0033, 21600/res,
						0, 0);
		Projection mapProj = map.getProjection();
		Point2D pt1 = mapProj.getRefXY(
				new Point2D.Double(
					rect.getX(), 
					rect.getY()));
		Point2D pt2 = mapProj.getRefXY(
				new Point2D.Double(
					rect.getX(),
					rect.getY() + 1.);
		
		pt1 = proj.getMapXY(pt1);
		pt2 = proj.getMapXY(pt2);
		double scl = pt2.getY()-pt1.getY();
		int x = (int)Math.floor(pt1.getX());
		int y = (int)Math.floor(pt1.getY());
		int width = (int)Math.ceil( scl*rect.getWidth()+1.);
		int height = (int)Math.ceil( scl*rect.getHeight()+1.);
		Rectangle r0 = new Rectangle( 0, 0, 675*scale,
					400*scale);
		Rectangle bounds = new Rectangle(x, y, width, height);
		int nLevel = 2;
		Grid2D.Short grid = new Grid2D.Short( bounds, proj);
		TileIO tileIO = new TileIO.Short( proj,
				base + "z_" + scale,
				size, nLevel);
		TiledGrid tiler = new TiledGrid( proj, 
						r0,
						tileIO,
						size,
						1,
						null);
		tiler.setWrap( 32*size/res );
		grid = (Grid2D.Short)tiler.composeGrid(grid);
		overlay.setGrid(grid, null, false, true, reset);
		overlay.setOffset(
		return true;
	}
}
