/*
 * @(#)Grid.java	0.1	03/12/19
 *
 */
package org.geomapapp.grid;

import org.geomapapp.geom.*;
import java.awt.geom.*;
import java.awt.Rectangle;
import java.awt.Dimension;

/**
 * A container for an 2-dimensional grid of numerical values.
 * @see MapProjection
 * @author Bill Haxby
 */
public abstract class Grid2D {

	/**
	 * The bounds of the grid in the projected coordinate
	 * system.  
	 */
	protected Rectangle bounds;
	/**
	 * The map projection object that translates between the
	 * reference coordinate system and the grid space.
	 */
	protected MapProjection projection;

	/**
	 * initiallizes the dimensions of the <code>Grid2D</code>
	 *	object.
	 * @param bounds the bounding box of the <code>Grid2D</code>
	 * @param projection <code>MapProjection</code> for this grid, 
	 * or <code>null</code> (in which case an <code>IdentityProjection
	 * </code> will be created).
	 */
	protected Grid2D(Rectangle bounds,
			MapProjection projection) {
		if( projection==null ) this.projection = new IdentityProjection();
		else this.projection = projection;
		this.bounds = bounds;
	}
	/**
	 * Gets the rectangle that specifies the location and size
	 * of this <code>Grid2D</code> in the projected coordinate system.
	 * @return the bounds.
	 */
	public Rectangle getBounds() {
		return (Rectangle)bounds.clone();
	}
	public Dimension getSize() {
		return new Dimension(bounds.width, bounds.height);
	}
	public double[] getRange() {
		double[] range = new double[] {0.,0.};
		boolean start=true;
		for( int x=bounds.x ; x<bounds.x+bounds.width ; x++) {
			for( int y=bounds.y ; y<bounds.y+bounds.height ; y++) {
				double z = valueAt(x,y);
				if( java.lang.Double.isNaN(z) )continue;
				if( start) {
					start = false;
					range[0] = range[1] = z;
					continue;
				}
				if( z<range[0] )range[0]=z;
				if( z>range[1] )range[1]=z;
			}
		}
		return range;
	}
	public MapProjection getProjection() {
		return projection;
	}
	public boolean contains( int x, int y) {
		return !(x<bounds.x 
			|| x>=bounds.x+bounds.width 
			|| y<bounds.y 
			|| y>=bounds.y+bounds.height );
	}
	public boolean contains( double x, double y) {
		return !(x<bounds.x 
			|| x>bounds.x+bounds.width-1 
			|| y<bounds.y 
			|| y>bounds.y+bounds.height-1 );
	}
	public abstract double valueAt( int x, int y);

	public double valueAt( double x, double y ) {
		return Interpolate2D.bicubic(this, x, y);
	}
	public int getIndex(int x, int y) {
		return x-bounds.x + bounds.width*(y-bounds.y);
	}
	/**
	 * Sets the value of a grid node.  If the specified node
	 * is not contained in the grid, the method returns 
	 * immediately.
	 * @param x the x-index of the grid node
	 * @param y the y-index of the grid node
         * @param val A double value to replace the current
         *      grid value at the specified node.
         */
	public abstract void setValue( int x, int y, double val );

	public static class Double extends Grid2D {
		protected double[] grid;
		public final static double NaN = java.lang.Double.NaN;
		public Double( Rectangle bounds,
				MapProjection projection ) {
			super( bounds, projection );
			grid=null;
		}
		public void initGrid() {
			if( grid!=null )return;
			grid = new double[bounds.width*bounds.height];
			for( int k=0 ; k<grid.length ; k++ ) grid[k] = NaN;
		}
		public double valueAt( int x, int y) {
			if( grid==null || !contains(x, y) ) return NaN;
			return grid[getIndex(x, y)];
		}
		public void setValue( int x, int y, double val ) {
			if( !contains(x, y) ) return;
			if( java.lang.Double.isNaN(val) && grid==null )return;
			initGrid();
			grid[getIndex(x, y)] = val;
		}
		public double[] getBuffer() {
			return grid;
		}
		/**
		 * Sets the data buffer that stores the grid values
		 * @param buffer The data buffer. Either a <code>double[]</code>
		 *	of length <code>bounds.width*bounds.height</code>,
		 * 	or <code>null</code>
		 * @throws ArrayIndexOutOfBoundsException if the length
		 * 	of the buffer is <B>not</B> 
		 *	<code>bounds.width*bounds.height</code>
		 * 	or <code>null</code>
		 */
		public void setBuffer(double[] buffer) {
			int size = bounds.width*bounds.height;
			if( buffer!=null && buffer.length<size ) {
				throw new ArrayIndexOutOfBoundsException(
					"buffer too small");
			}
			grid=buffer;
		}
	}
	public static class Float extends Grid2D {
		public final static float NaN = java.lang.Float.NaN;
		protected float[] grid;
		public Float( Rectangle bounds,
				MapProjection projection ) {
			super( bounds, projection );
			grid=null;
		}
		public void initGrid() {
			if(grid!=null)return;
			grid = new float[bounds.width*bounds.height];
			for( int k=0 ; k<grid.length ; k++ ) grid[k] = NaN;
		}
		public double valueAt( int x, int y) {
			return (double)floatValue(x, y);
		}
		public float floatValue( int x, int y) {
			if( grid==null || !contains(x, y) ) return NaN;
			return grid[getIndex(x, y)];
		}
		public void setValue( int x, int y, double val ) {
			setValue( x, y, (float)val);
		}
		public void setValue( int x, int y, float val ) {
			if( !contains(x, y) ) return;
			if( grid==null && java.lang.Float.isNaN(val) )return;
			initGrid();
			grid[getIndex(x, y)] = val;
		}
		public float[] getBuffer() {
			return grid;
		}
		/**
		 * Sets the data buffer that stores the grid values
		 * @param buffer The data buffer. Either a <code>float[]</code>
		 *	of length <code>bounds.width*bounds.height</code>,
		 * 	or <code>null</code>
		 * @throws ArrayIndexOutOfBoundsException if the length
		 * 	of the buffer is <B>not</B> 
		 *	<code>bounds.width*bounds.height</code>
		 * 	or <code>null</code>
		 */
		public void setBuffer(float[] buffer) {
			int size = bounds.width*bounds.height;
			if( buffer!=null && buffer.length<size ) {
				throw new ArrayIndexOutOfBoundsException(
					"buffer too small");
			}
			grid=buffer;
		}
	}
	public static class Short extends Grid2D {
		public final static short NaN = -32768;
		double scale, offset;
		boolean scaled;
		protected short[] grid;
		public Short( Rectangle bounds,
				MapProjection projection ) {
			super( bounds, projection );
			scale = 1.;
			offset = 0.;
			scaled = false;
			grid=null;
		}
		public void scale(double offset, double scale) {
			this.scale = scale;
			this.offset = offset;
			if( scale!=1. || offset!=0. ) scaled=true;
		}
		public double[] getScales() {
			return new double[] {offset, scale};
		}
		public boolean isScaled() {
			return scaled;
		}
		public void initGrid() {
			if(grid!=null)return;
			grid = new short[bounds.width*bounds.height];
			for( int k=0 ; k<grid.length ; k++ ) grid[k] = NaN;
		}
		public double valueAt( int x, int y) {
			short val = shortValue(x, y);
			if( val==NaN )return Double.NaN;
			if( scaled ) return offset + val/scale;
			return (double)val;
		}
		public short shortValue(int x, int y) {
			if( grid==null || !contains(x, y) ) return NaN;
			return grid[getIndex(x, y)];
		}
		public void setValue( int x, int y, double val ) {
			if( scaled ) val = (val - offset)*scale;
			if( java.lang.Double.isNaN(val) ||
				Math.rint(Math.abs(val)) > 32767. ) setValue( x, y, NaN);
			else setValue( x, y, (short)Math.rint(val));
		}
		public void setValue( int x, int y, short val ) {
			if( !contains(x, y) ) return;
			if( grid==null && val==NaN )return;
			initGrid();
			grid[getIndex(x, y)] = val;
		}
		public short[] getBuffer() {
			return grid;
		}
		/**
		 * Sets the data buffer that stores the grid values
		 * @param buffer The data buffer. Either a <code>short[]</code>
		 *	of length <code>bounds.width*bounds.height</code>,
		 * 	or <code>null</code>
		 * @throws ArrayIndexOutOfBoundsException if the length
		 * 	of the buffer is <B>not</B> 
		 *	<code>bounds.width*bounds.height</code>
		 * 	or <code>null</code>
		 */
		public void setBuffer(short[] buffer) {
			int size = bounds.width*bounds.height;
			if( buffer!=null && buffer.length<size ) {
				throw new ArrayIndexOutOfBoundsException(
					"buffer too small");
			}
			grid=buffer;
		}
	}
	public static class Byte extends Grid2D {
		public final static short NaN = 0;
		protected byte[] grid;
		public Byte( Rectangle bounds,
				MapProjection projection ) {
			super( bounds, projection );
			grid=null;
		}
		public void initGrid() {
			if(grid!=null)return;
			grid = new byte[bounds.width*bounds.height];
			for( int k=0 ; k<grid.length ; k++ ) grid[k] = NaN;
		}
		public double valueAt( int x, int y) {
			short val = byteValue(x, y);
			return (double)val;
		}
		public byte byteValue(int x, int y) {
			if( grid==null || !contains(x, y) ) return NaN;
			return grid[getIndex(x, y)];
		}
		public void setValue( int x, int y, double val ) {
			setValue( x, y, (byte)Math.rint(val));
		}
		public void setValue( int x, int y, byte val ) {
			if( !contains(x, y) ) return;
			if( grid==null && val==NaN )return;
			initGrid();
			grid[getIndex(x, y)] = val;
		}
		public byte[] getBuffer() {
			return grid;
		}
		/**
		 * Sets the data buffer that stores the grid values
		 * @param buffer The data buffer. Either a <code>byte[]</code>
		 *	of length <code>bounds.width*bounds.height</code>,
		 * 	or <code>null</code>
		 * @throws ArrayIndexOutOfBoundsException if the length
		 * 	of the buffer is <B>not</B> 
		 *	<code>bounds.width*bounds.height</code>
		 * 	or <code>null</code>
		 */
		public void setBuffer(byte[] buffer) {
			int size = bounds.width*bounds.height;
			if( buffer!=null && buffer.length<size ) {
				throw new ArrayIndexOutOfBoundsException(
					"buffer too small");
			}
			grid=buffer;
		}
	}
	public static class Boolean extends Grid2D {
		protected byte[] grid;
		public Boolean( Rectangle bounds,
				MapProjection projection ) {
			super( bounds, projection );
			grid=null;
		}
		public void initGrid() {
			if(grid!=null)return;
			int size = bounds.width*bounds.height;
			size = (size+7)>>3;
			grid = new byte[size];
			for( int k=0 ; k<size ; k++ ) grid[k] = 0;
		}
		public double valueAt( double x, double y ) {
			return valueAt( (int)Math.rint(x),
					(int)Math.rint(y) );
		}
		public double valueAt( int x, int y) {
			boolean val = booleanValue(x, y);
			return val ? 1. : 0.;
		}
		public boolean booleanValue(int x, int y) {
			if( grid==null || !contains(x, y) ) return false;
			int i = getIndex(x,y);
			int k = i>>3;
			i -= k<<3;
			byte test = (byte)(1<<i);
			return (grid[k]&test)==test;
		}
		public void setValue( int x, int y, double val ) {
			setValue( x, y, (val!=0.) );
		}
		public void setValue( int x, int y, boolean tf ) {
			if( !contains(x, y) ) return;
			if( grid==null && !tf )return;
			initGrid();
			int i = getIndex(x,y);
			int k = i>>3;
			i -= k<<3;
			if(tf) {
				grid[k] |= (byte)(1<<i);
			} else {
				grid[k] &= (byte)(~(1<<i));
			}
		}
		public byte[] getBuffer() {
			return grid;
		}
		/**
		 * Sets the data buffer that stores the grid values
		 * @param buffer The data buffer. Either a <code>byte[]</code>
		 *	of length <code>(bounds.width*bounds.height+7)>>3</code>,
		 * 	or <code>null</code>
		 * @throws ArrayIndexOutOfBoundsException if the length
		 * 	of the buffer is <B>not</B> 
		 *	<code>(bounds.width*bounds.height+7)>>3</code>
		 * 	or <code>null</code>
		 */
		public void setBuffer(byte[] buffer) {
			int size = bounds.width*bounds.height;
			size = (size+7)>>3;
			if( buffer!=null && buffer.length<size ) {
				throw new ArrayIndexOutOfBoundsException(
					"buffer too small");
			}
			grid=buffer;
		}
	}
}
