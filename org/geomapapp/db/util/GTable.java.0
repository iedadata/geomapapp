package org.geomapapp.db.util;

import org.geomapapp.gis.table.*;

import haxby.util.XBTable;
import haxby.map.*;
import org.geomapapp.geom.MapProjection;

import java.util.Vector;
import java.awt.*;
import java.io.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import javax.swing.event.*;

public class GTable extends TableDB implements Overlay {
	XMap map;
	float[][] xy;
	float[][] currentXY;
	int[] selectedRows;
	Rectangle2D lastBox;
	JFrame frame;
	MouseInputAdapter mouseSelect;
	int lastSelected=-1;
	public GTable( Vector headings, Vector rows, TableDB parent) {
		super(headings, rows, parent);
	}
	public GTable( Vector headings, Vector rows, StringBuffer comments) {
		super( headings, rows, comments);
	}
	public GTable(String url) throws IOException {
		super( url);
	}
	public GTable(String url, String delim) throws IOException {
		super( url, delim);
	}
	public GTable(File file) throws IOException {
		super( file);
	}
	public GTable(File file, String delim) throws IOException {
		super( file, delim);
	}
	public GTable() throws IOException {
		super();
	}
	public void setMap( XMap map ) {
		if( latCol<0 || lonCol<0 )return;
		this.map = map;
		int k=0;
		Vector pts = new Vector(allRows.size());
		while( k<allRows.size() ) {
			Point2D p = getPoint(k);
			if( p==null ) {
				allRows.remove(k);
				continue;
			}
			pts.add(map.getProjection().getMapXY(p));
			k++;
		}
		allRows.trimToSize();
		xy = new float[allRows.size()][2];
		for( k=0 ; k<allRows.size() ; k++) {
			Point2D p = (Point2D)pts.get(k);
			xy[k][0] = (float)p.getX();
			xy[k][1] = (float)p.getY();
			Vector row = (Vector)allRows.get(k);
			while( row.size()<headings.size() )row.add(null);
			while( row.size()>headings.size() )row.remove(row.get(row.size()-1));
			row.add( new Integer(k));
			row.add( xy[k] );
		}
		table = createTable();
		table.getSelectionModel().addListSelectionListener(
			new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent e) {
					drawSelection();
				}
			});
		mouseSelect = new MouseInputAdapter() {
			public void mouseClicked(MouseEvent e) {
				if( e.isControlDown() ) return;
				select(e);
			}
		};
		map.addMouseListener( mouseSelect );
	}
	void select( MouseEvent e) {
		if( !map.isSelectable() ) return;
		double zoom = map.getZoom();
		double radius = 3./Math.pow(zoom, .75);
		double r2 = radius*radius;
		double wrap = map.getWrap();
		Point2D p = map.getScaledPoint(e.getPoint());
		if( !e.isShiftDown() ) table.clearSelection();
		for( int k=0 ; k<currentXY.length ; k++) {
			double offset = 0.;
			while( currentXY[k][0]+offset<p.getX()-radius ) offset+=wrap;
			while( currentXY[k][0]+offset>p.getX()+radius ) offset-=wrap;
			if( currentXY[k][0]+offset<p.getX()-radius )continue;
			double r = p.distanceSq( offset+currentXY[k][0], (double)currentXY[k][1]);
			if( r < r2) {
				table.getSelectionModel().addSelectionInterval(k,k);
				table.ensureIndexIsVisible(k);
			}
		}
	}
	public void redraw() {
		synchronized(map.getTreeLock()) {
			draw(map.getGraphics2D());
		}
	}
	public Point2D getPoint(int rowIndex) {
		Vector row = (Vector)allRows.get(rowIndex);
		if( row.get(latCol)==null || row.get(lonCol)==null)return null;
		Point2D.Double p = new Point2D.Double( 
			((Double)row.get(lonCol)).doubleValue(),
			((Double)row.get(latCol)).doubleValue() );
		return p;
	}
	public void drawSelection() {
		if( xy==null || map==null ) return;
		synchronized(map.getTreeLock()) {
			Graphics2D g = map.getGraphics2D();
			double wrap=map.getWrap();
			boolean check = wrap>0.;
			Rectangle2D box = map.getClipRect2D();
			double minX = box.getX();
			double maxX = minX+box.getWidth();
			double zoom = map.getZoom();
			double size = 3./Math.pow(zoom, .75);
			Arc2D.Double arc = new Arc2D.Double( -size, -size, 2*size, 2*size, 0., 360., Arc2D.CHORD );
			AffineTransform at = g.getTransform();
			g.setStroke( new BasicStroke( .5f*(float)size ));
			check = check && box.getWidth()>wrap;
			if( selectedRows==null ) selectedRows = new int[0];
			for( int i=0 ; i<selectedRows.length ; i++) {
				int k = selectedRows[i];
				if( k>=currentXY.length )continue;
				double x = (double)currentXY[k][0];
				g.translate( x, (double)currentXY[k][1]);
				g.setColor( Color.black);
				g.draw( arc );
				g.setColor( Color.lightGray );
				g.fill( arc );
				if( check && x<maxX ) {
					g.translate( wrap, 0.);
					g.setColor( Color.black);
					g.draw( arc );
					g.setColor( Color.lightGray );
					g.fill( arc );
				}
				g.setTransform(at);
			}
			createTable();
			if( table==null ) {
				System.out.println("no table");
				return;
			}
			selectedRows = table.getSelectedRows();
			for( int i=0 ; i<selectedRows.length ; i++) {
				int k = selectedRows[i];
				double x = (double)currentXY[k][0];
				g.translate( x, (double)currentXY[k][1]);
				g.setColor( Color.white);
				g.draw( arc );
				g.setColor( Color.red );
				g.fill( arc );
				if( check && x<maxX ) {
					g.translate( wrap, 0.);
					g.setColor( Color.white);
					g.draw( arc );
					g.setColor( Color.red );
					g.fill( arc );
				}
				g.setTransform(at);
			}
		}
	}
	public void draw( Graphics2D g ) {
		if( xy==null || map==null ) return;
		Rectangle2D box = map.getClipRect2D();
		double minX = box.getX();
		double maxX = minX+box.getWidth();
		double minY = box.getY();
		double maxY = minY+box.getHeight();
		double wrap=map.getWrap();
		boolean check = wrap>0.;
		if( !box.equals(lastBox) ) {
			Vector test = allRows;
			float[][] xytest = xy;
			if( lastBox!=null && lastBox.contains(minX, minY, box.getWidth(), box.getHeight())) {
				test = currentRows;
				xytest = currentXY;
			}
			Vector newXY = new Vector(test.size());
			Vector newRows = new Vector(test.size());
			int[] selected = table==null
				? new int[0]
				: table.getSelectedRows();
			Vector select = new Vector(selected.length);
			for( int k=0 ; k<selected.length ; k++) {
				select.add( currentRows.get(selected[k]));
			}
			Vector selIndices = new Vector(selected.length);
			for( int k=0 ; k<test.size() ; k++) {
				int sel = select.indexOf(test.get(k));
				if( sel>=0 )select.remove(sel);
				if( xytest[k][1]>maxY || xytest[k][1]<minY )continue;
				boolean inside=false;
				if( check ) {
					while( xytest[k][0]>minX+wrap )xytest[k][0]-=wrap;
					while( xytest[k][0]<minX )xytest[k][0]+=wrap;
					inside = xytest[k][0]<maxX;
				} else {
					inside = xytest[k][0]>minX && xytest[k][0]<maxX;
				}
				if( inside ) {
					newXY.add(xytest[k]);
					newRows.add( test.get(k) );
					if( sel>=0 )selIndices.add(new Integer(newRows.size()-1));
				}
			}
			newRows.trimToSize();
			currentXY = new float[newXY.size()][];
			for( int k=0 ; k<newXY.size() ; k++) currentXY[k] = (float[])newXY.get(k);
			currentRows = newRows;
			if( table!=null ) fireTableDataChanged();
			selectedRows = new int[selIndices.size()];
			for( int k=0 ; k<selIndices.size() ; k++) {
				int i = ((Integer)selIndices.get(k)).intValue();
				selectedRows[k] = i;
				table.getSelectionModel().addSelectionInterval(i,i);
			}
		}
		if( currentXY.length>20000 )return;
		lastBox = box;
		double zoom = map.getZoom();
		double size = 3./Math.pow(zoom, .75);
		Arc2D.Double arc = new Arc2D.Double( -size, -size, 2*size, 2*size, 0., 360., Arc2D.CHORD );
		AffineTransform at = g.getTransform();
		g.setStroke( new BasicStroke( .5f*(float)size ));
		check = check && box.getWidth()>wrap;
		for( int k=0 ; k<currentXY.length ; k++) {
			double x = (double)currentXY[k][0];
			g.translate( x, (double)currentXY[k][1]);
			g.setColor( Color.black);
			g.draw( arc );
			g.setColor( Color.lightGray );
			g.fill( arc );
			if( check && x<maxX ) {
				g.translate( wrap, 0.);
				g.setColor( Color.black);
				g.draw( arc );
				g.setColor( Color.lightGray );
				g.fill( arc );
			}
			g.setTransform(at);
		}
		createTable();
		if( table==null ) {
			System.out.println("no table");
			return;
		}
		selectedRows = table.getSelectedRows();
		for( int i=0 ; i<selectedRows.length ; i++) {
			int k = selectedRows[i];
			double x = (double)currentXY[k][0];
			g.translate( x, (double)currentXY[k][1]);
			g.setColor( Color.white);
			g.draw( arc );
			g.setColor( Color.red );
			g.fill( arc );
			if( check && x<maxX ) {
				g.translate( wrap, 0.);
				g.setColor( Color.white);
				g.draw( arc );
				g.setColor( Color.red );
				g.fill( arc );
			}
			g.setTransform(at);
		}
		
	}
	protected void apply() {
		super.apply();
		map.repaint();
	}
	protected void reset() {
		super.reset();
		map.repaint();
	}
	public static void main(String[] args) {
		try {
			JFileChooser c = new JFileChooser(System.getProperty("user.dir"));
			int ok = c.showOpenDialog(null);
			if( ok==c.CANCEL_OPTION )System.exit(0);
			GTable t = new GTable(c.getSelectedFile());
			XBTable table = t.createTable();
			table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
			table.setScrollableTracksViewportWidth(false);

			MapApp app = null;
			if( args.length>0 ) {
				xb.bill.PC pc = new xb.bill.PC();
				app = pc.getApp();
			} else {
				app = new MapApp();
			}
			XMap map = app.getMap();
			t.setMap( map);

			map.addOverlay( t );

			JFrame f = new JFrame( c.getSelectedFile().getName() );
			f.getContentPane().add(new JScrollPane(table));
			f.pack();
			f.show();
		//	f.setDefaultCloseOperation(f.EXIT_ON_CLOSE);
			map.repaint();
		} catch(Throwable e) {
			e.printStackTrace();
			System.exit(-1);
		}
	}
}
