package org.geomapapp.db.dsdp;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.geom.*;

public class FossilDisplay extends JComponent {
	DSDPHole hole;
	FossilGroup group;
	FossilAssembly fossils;
	double zScale;
	JTextField text;
	MouseInputAdapter mouse;
	int lastFossil = -1;
	public FossilDisplay(DSDPHole hole,
			JTextField text,
			FossilGroup group ) {
		this.text = text;
		this.hole = hole;
		this.group = group;
		fossils = hole.getFossilAssembly( group.getGroupName() );
		zScale = 2.;
	}
	public String getGroupName() {
		return group.getGroupName();
	}
	public void setHole( DSDPHole hole ) {
		this.hole = hole;
		fossils = hole.getFossilAssembly( group.getGroupName() );
	}
	public void setGroup(FossilGroup group) {
		this.group = group;
	}
	public Dimension getPreferredSize() {
		int h = (int)Math.ceil(hole.totalPen*zScale);
		if( fossils==null ) return new Dimension( 250, h);
		int w = fossils.getAllCodes().length * 8;
		return new Dimension(w, h);
	}
	public void addNotify() {
		super.addNotify();
		if( mouse==null ) {
			initMouse();
		} else {
			removeMouseListener(mouse);
			removeMouseMotionListener(mouse);
		}
		addMouseListener(mouse);
		addMouseMotionListener(mouse);
	}
	void initMouse() {
		mouse = new MouseInputAdapter() {
			public void mouseExited(MouseEvent e) {
				move(-1);
			}
			public void mouseMoved(MouseEvent e) {
				int k = e.getX()/8;
				move(k);
			}
		};
	}
	void move(int k ) {
		requestFocus();
		if( fossils==null )return;
		short[] codes = fossils.getAllCodes();
		if( k>=codes.length )k=-1;
		if( k>=0 ) {
			int code = codes[k];
			String name = group.getFossilName(code);
			text.setText("("+code+") "+name);
		} else {
			text.setText("");
		}
		Rectangle r = getVisibleRect();
		r.width = 8;
		synchronized(getTreeLock()) {
			Graphics2D g = (Graphics2D)getGraphics();
			g.setXORMode(Color.red);
			if( lastFossil != -1) {
				r.x = lastFossil*8;
				g.fill(r);
			}
			lastFossil = k;
			if( lastFossil != -1) {
				r.x = lastFossil*8;
				g.fill(r);
			}
		}
	}
	public void paint(Graphics graphics) {
		lastFossil = -1;
		Graphics2D g = (Graphics2D)graphics;
		if( fossils==null ) return;
		short[] codes = fossils.getAllCodes();
		FossilEntry[] entries = fossils.entries;
		g.setStroke( new BasicStroke(2f));
		g.setColor(Color.white);
		g.fill( getVisibleRect());
		g.setColor( Color.black );
		float[] pt;
		for( int i=0 ; i<codes.length ; i++) {
			Vector az = new Vector();
			for( int k=0 ; k<entries.length ; k++) {
				float a = (float)entries[k].abundanceForCode((int)codes[i]);
				if( a==-2.f )continue;
/*
				if( a==-2.f ) {
					if( az.size()==0 )continue;
					pt = (float[])az.get(0);
					if( az.size()==1 ) {
						Line2D.Float line = new Line2D.Float(3.f-pt[0], pt[1], 4.f+pt[0], pt[1]);
						g.draw(line);
					} else {
						GeneralPath p = new GeneralPath();
						p.moveTo( 3.f-pt[0], pt[1]);
						for( int j=1 ; j<az.size() ; j++) {
							pt = (float[])az.get(j);
							p.lineTo( 3.f-pt[0], pt[1]);
						}
						for( int j=az.size()-1 ; j>=0 ; j--) {
							pt = (float[])az.get(j);
							p.lineTo( 4.f+pt[0], pt[1]);
						}
						g.setColor(Color.gray);
						p.closePath();
						g.fill(p);
						g.setColor( Color.black );
						for( int j=0 ; j<az.size() ; j++) {
							pt = (float[])az.get(j);
							Line2D.Float line = new Line2D.Float(3.f-pt[0], pt[1], 
								4.f+pt[0], pt[1]);
							g.draw(line);
						}
					}
					az = new Vector();
					continue;
				}
*/
				a = (a+1.f)/2.f;
				float z = (float)zScale * entries[k].depth;
				az.add( new float[] {a, z, (float)k});
			}
			if( az.size()!=0 ) {
				pt = (float[])az.get(0);
				if( az.size()==1 ) {
					Line2D.Float line = new Line2D.Float(3.f-pt[0], pt[1], 4.f+pt[0], pt[1]);
					g.draw(line);
				} else {
					GeneralPath p = new GeneralPath();
					p.moveTo( 3.f-pt[0], pt[1]);
					for( int j=1 ; j<az.size() ; j++) {
						pt = (float[])az.get(j);
						p.lineTo( 3.f-pt[0], pt[1]);
					}
					for( int j=az.size()-1 ; j>=0 ; j--) {
						pt = (float[])az.get(j);
						p.lineTo( 4.f+pt[0], pt[1]);
					}
					g.setColor(Color.gray);
					p.closePath();
					g.fill(p);
					g.setColor( Color.black );
					for( int j=0 ; j<az.size() ; j++) {
						pt = (float[])az.get(j);
						Line2D.Float line = new Line2D.Float(3.f-pt[0], pt[1], 
							4.f+pt[0], pt[1]);
						g.draw(line);
					}
				}
			}
			g.translate( 8., 0.);
		}
	}
}
