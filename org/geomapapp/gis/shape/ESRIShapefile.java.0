package org.geomapapp.gis.shape;

import haxby.util.*;
import haxby.map.XMap;

import org.geomapapp.geom.MapProjection;
import org.geomapapp.io.LittleIO;

import java.io.*;
import java.util.*;

import javax.swing.*;
import javax.swing.tree.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;

public class ESRIShapeFile extends java.awt.geom.Rectangle2D.Double 
				implements haxby.map.Overlay, TreeNode {
			//	implements ESRIShape {
	public final static int NULL = 0;
	public final static int POINT = 1;
	public final static int POINT_M = 21;
	public final static int POINT_Z = 11;
	public final static int MULTIPOINT = 8;
	public final static int MULTIPOINT_M = 28;
	public final static int MULTIPOINT_Z = 18;
	public final static int POLYLINE = 3;
	public final static int POLYLINE_M = 23;
	public final static int POLYLINE_Z = 13;
	double nodata = -2.e38;
	Color defaultOutline;
	Color defaultFill;
	LineWidth defaultLW;
	String path;
	String filename;
	MainHeader header;
	Vector shapes;
	ESRIShapeFile parent;
	Vector children;
	DBFFile dbfFile;
	boolean visible = true;
	Vector selected;
	XMap map;
	XBTable table;
	int selectedIndex = -1;
	public ESRIShapeFile(String name, int type, Vector names, Vector classes) {
		filename = name;
		dbfFile = new DBFFile(names, classes);
		header = new MainHeader();
		header.type = type;
		shapes = new Vector();
		children = new Vector();
		initColors();
	}
	public ESRIShapeFile( String path, String fileprefix ) throws IOException {
		super();
		this.path = path;
		this.filename = fileprefix;
		if( !exists() ) throw new IOException("does not exist");
		filename = fileprefix;
		shapes = new Vector();
		readShapes();
		dbfFile = new DBFFile( path, fileprefix);
		selected = new Vector();
		initColors();
	}
	public void setParent( ESRIShapeFile parent ) {
		this.parent = parent;
	}
	public void addShape( ESRIShape shape, Vector record) {
		shapes.add( shape );
		dbfFile.addRecord( record );
		getTable();
		dbfFile.fireTableStructureChanged();
	}
	public void removeSelectedObject() {
		int index = getTable().getSelectedRow();
		if( index<0 )return;
		shapes.remove( index);
		dbfFile.getRecords().remove(index);
		dbfFile.fireTableStructureChanged();
		map.repaint();
	}
	public int size() {
		return shapes.size();
	}
	public boolean exists() {
		if( path.startsWith( "http://" )) return true;
		if( path.startsWith( "file://" )) return true;
		if( !(new File(path,filename+".shp")).exists() ) return false;
		if( !(new File(path,filename+".dbf")).exists() ) return false;
	//	if( !(new File(path,filename+".shx")).exists() ) return false;
		return true;
	}
	public Vector getShapes() {
		if( shapes.size()==0 && exists() ) {
			try {
				shapes = readShapes();
			} catch(IOException ex) {
			}
		}
		return shapes;
	}
	public int getSelectedIndex( NearNeighbor n ) {
		int k=selectedIndex;
		for( int i=0 ; i<shapes.size() ; i++) {
			k=(k+1)%shapes.size();
			ESRIShape shape = (ESRIShape)shapes.get(k);
			if( shape.getType()==0 )continue;
			if( shape.select(n).shape==shape ) {
				selectedIndex = k;
				return k;
			}
		}
		selectedIndex = -1;
		return -1;
	}
	public void writeShapes(File file) throws IOException {
		if( map!=null ) {
			writeShapes(file, map.getProjection());
		} else {
			writeShapes(file, null);
		}
	}
	public void writeShapes(File file, MapProjection proj) throws IOException {
		String path = file.getParent();
		String name = file.getName();
		if( name.endsWith(".shp") ) name=name.substring(0, name.indexOf(".shp"));
		dbfFile.write(path, name);
		file = new File( path, name+".shp");
		RandomAccessFile shp = new RandomAccessFile(file, "rw");
		shp.writeInt(9994);
		for( int k=0 ; k<6 ; k++ ) shp.writeInt(0);
		LittleIO.writeInt( 1000, shp );
		LittleIO.writeInt( getType(), shp );
		shp.seek(100L);
		double[][] bounds = new double[4][];
		int[][] offlen = new int[shapes.size()][2];
		for( int k=0 ; k<shapes.size() ; k++) {
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			offlen[k][0] = ((int)shp.getFilePointer())/2;
			ESRIShape shape = (ESRIShape)shapes.get(k);
			if( shape.getType()==0 ) {
				shp.writeInt(k+1);
				shp.writeInt( 2 );
				shp.writeInt(0);
				continue;
			}
			if( proj!=null ) {
				if( shape instanceof ESRIMultiPoint) {
					ESRIMultiPoint mp = (ESRIMultiPoint)shape;
					bounds = shape.inverse(proj, bounds);
				} else {
					ESRIPoint p = (ESRIPoint)shape;
					bounds = shape.inverse(proj, bounds);
				}
			}
			int recLen = shape.writeShape(out);
			byte[] data = out.toByteArray();
//	System.out.println( k +"\t"+ recLen +"\t"+ data.length);
			shp.writeInt(k+1);
			shp.writeInt( data.length/2 + 2 );
			LittleIO.writeInt( shape.getType(), shp );
			shp.write( data );
			offlen[k][1] = data.length/2 + 2;
		}
		int length = ((int)shp.getFilePointer())/2;
		shp.seek( 24L);
		shp.writeInt( length );
		shp.seek( 36L );
		double[] range = new double[] { 0., 0.,};
		double[] xRange = bounds[0];
		double[] yRange = bounds[1];
		LittleIO.writeDouble( xRange[0], shp);
		LittleIO.writeDouble( yRange[0], shp);
		LittleIO.writeDouble( xRange[1], shp);
		LittleIO.writeDouble( yRange[1], shp);
		for( int k=2 ; k<4 ; k++) {
			double[] r = bounds[k];
			if( r==null ) r=range;
			LittleIO.writeDouble( r[0], shp);
			LittleIO.writeDouble( r[1], shp);
		}
		shp.close();

		file = new File( path, name+".shx");
		RandomAccessFile shx = new RandomAccessFile(file, "rw");
		shx.writeInt(9994);
		for( int k=0 ; k<5 ; k++ ) shx.writeInt(0);
		shx.writeInt( 50+4*offlen.length );
		LittleIO.writeInt( 1000, shx );
		LittleIO.writeInt( getType(), shx );
		LittleIO.writeDouble( xRange[0], shx);
		LittleIO.writeDouble( yRange[0], shx);
		LittleIO.writeDouble( xRange[1], shx);
		LittleIO.writeDouble( yRange[1], shx);

		for( int k=2 ; k<4 ; k++) {
			double[] r = bounds[k];
			if( r==null ) r=range;
			LittleIO.writeDouble( r[0], shx);
			LittleIO.writeDouble( r[1], shx);
		}
		for( int k=0 ; k<offlen.length ; k++) {
			shx.writeInt(offlen[k][0]);
			shx.writeInt(offlen[k][1]);
		}
		shx.close();
		if( map!=null)forward(proj, map.getWrap());
	}
	public NearNeighbor select( NearNeighbor n ) {
		for( int k=0 ; k<shapes.size() ; k++) {
			ESRIShape shape = (ESRIShape)shapes.get(k);
			if( shape.getType()==0 )continue;
			if( shape.select(n).shape==shape ) return n;
		}
		return n;
	}
	public DBFFile getDBFFile() {
		return dbfFile;
	}
	public XBTable getTable() {
		if( table==null ) {
			table = new XBTable(dbfFile);
		}
		return table;
	}
	public String getName() {
		return filename;
	}
	public void setName( String name) {
		filename = name;
	}
	public int getType() {
		if( header==null ) return 0;
		return header.type;
	}
	public void setVisible( boolean tf ) {
		if( visible==tf )return;
		visible = tf;
		map.repaint();
	}
	public boolean isVisible() {
		return visible;
	}
	void initColors() {
		defaultLW = new LineWidth(1f);
		int t = getType()%10;
		if( t==3 ) defaultFill=null;
		else defaultFill = Color.lightGray;
		defaultOutline = Color.black;
	}
	public void setDefaultFill(Color c) {
		if( getType()%10 == 3 )return;
		defaultFill = c;
	}
	public Color getDefaultFill() {
		return defaultFill;
	}
	public void setDefaultOutline(Color c) {
		defaultOutline = c;
	}
	public Color getDefaultOutline() {
		return defaultOutline;
	}
	public void setDefaultLW(LineWidth lw) {
		defaultLW = lw;
		map.repaint();
	}
	public LineWidth getDefaultLW() {
		return defaultLW;
	}
	public void sort( int col, boolean inverse ) {
		int[] order = dbfFile.sort(col, inverse);
		Vector shps = new Vector( order.length );
		for( int k=0 ; k<order.length ; k++) shps.add(shapes.get(order[k]));
		shapes = shps;
	}
	public Vector readShapes() throws IOException {
		if( !exists() ) throw new FileNotFoundException();
		boolean url = path.startsWith( "http://" ) || path.startsWith( "file://" );
		if( url&& !path.endsWith("/") ) path += "/";
		InputStream in = url ?
			(new java.net.URL(path+filename+".shp")).openStream()
			: new FileInputStream(new File(path, filename+".shp"));
		DataInputStream shp = new DataInputStream(
				new BufferedInputStream(in));
		header = MainHeader.getHeader(shp);
		int t = header.type%10;
		if( header.type-t == 10 || header.type==31 )
			throw new IOException("unsupported shape type: "+header.type);
		x = header.xBounds[0];
		width = header.xBounds[1]-x;
		y = header.yBounds[0];
		height = header.xBounds[1]-y;
		int offset = 100;
		while( offset<2*header.length-1 ) {
			int n = shp.readInt();
			int len = shp.readInt();
			offset+=8+len*2;
			int type = LittleIO.readInt(shp);
			if( type!=0 && type!=header.type ) throw new IOException("wrong type: "+type);
			if( type==0 ) {
				shapes.add( new ESRINull() );
			} else if( type==1 ) {
				shapes.add(new ESRIPoint(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp)));
			} else if( type==21 ) {
				shapes.add(new ESRIPointM(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp)));
			} else if( type==8 ) {
				ESRIMultiPoint obj = new ESRIMultiPoint(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readInt(shp));
				for( int i=0 ; i<obj.length() ; i++) {
					obj.addPoint( i,
						LittleIO.readDouble(shp),
						LittleIO.readDouble(shp));
				}
				shapes.add( obj );
			} else if( type==28 ) {
				ESRIMultiPointM obj = new ESRIMultiPointM(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readInt(shp));
				for( int i=0 ; i<obj.length() ; i++) {
					obj.addPoint( i,
						LittleIO.readDouble(shp),
						LittleIO.readDouble(shp));
				}
				obj.setMRange(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp));
				for( int i=0 ; i<obj.length() ; i++) {
					obj.m[i] = LittleIO.readDouble(shp);
				}
				shapes.add( obj );
			} else if( type==23 ) {
				ESRIPolyLineM obj = new ESRIPolyLineM(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readInt(shp),
					LittleIO.readInt(shp));
				for( int i=0 ; i<obj.nParts() ; i++) {
					obj.parts[i] = LittleIO.readInt(shp);
				}
				for( int i=0 ; i<obj.length() ; i++) {
					obj.addPoint( i,
						LittleIO.readDouble(shp),
						LittleIO.readDouble(shp));
				}
				obj.setMRange(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp));
				for( int i=0 ; i<obj.length() ; i++) {
					obj.m[i] = LittleIO.readDouble(shp);
				}
				shapes.add( obj );
			} else if( type==3 ) {
				ESRIPolyLine obj = new ESRIPolyLine(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readInt(shp),
					LittleIO.readInt(shp));
				for( int i=0 ; i<obj.nParts() ; i++) {
					obj.parts[i] = LittleIO.readInt(shp);
				}
				for( int i=0 ; i<obj.length() ; i++) {
					obj.addPoint( i,
						LittleIO.readDouble(shp),
						LittleIO.readDouble(shp));
				}
				shapes.add( obj );
			} else if( type==5 ) {
				ESRIPolygon obj = new ESRIPolygon(
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readDouble(shp),
					LittleIO.readInt(shp),
					LittleIO.readInt(shp));
				for( int i=0 ; i<obj.nParts() ; i++) {
					obj.parts[i] = LittleIO.readInt(shp);
				}
				for( int i=0 ; i<obj.length() ; i++) {
					obj.addPoint( i,
						LittleIO.readDouble(shp),
						LittleIO.readDouble(shp));
				}
				shapes.add( obj );
			}
		}
		return shapes;
	}
	public void setMap(XMap map) {
		if(map==null)return;
		if(this.map!=null)return;
		this.map = map;
		forward(map.getProjection(), map.getWrap());
	}
	public XMap getMap() {
		return map;
	}
	public void forward(MapProjection proj, double wrap) {
		if( shapes==null || shapes.size()==0 )return;
		double[][] bounds = new double[4][];
		for( int k=0 ; k<shapes.size() ; k++) {
			ESRIShape shape = (ESRIShape)shapes.get(k);
			if( shape.getType()==0 )continue;
			try {
				bounds = ((ESRIPoint)shape).forward(proj, wrap, bounds);
			} catch(Exception e) {
				bounds = ((ESRIMultiPoint)shape).forward(proj, wrap, bounds);
			}
		}
		if( bounds[0]==null )return;
		x = bounds[0][0];
		y = bounds[1][0];
		width = bounds[0][1]-x;
		height = bounds[1][1]-y;
	}
	public void draw(java.awt.Graphics2D g) {
		if( !visible ) return;
		int[] rows = getTable().getSelectedRows();
		Arrays.sort(rows);
		int i=0;
		g.setStroke(new BasicStroke(defaultLW.getLineWidth()/(float)map.getZoom()));
		g.setColor(defaultOutline);
		Rectangle2D rect = map.getClipRect2D();
		double wrap = map.getWrap();
		for( int k=0 ; k<shapes.size() ; k++) {
			if( i<rows.length && k==rows[i]) {
				i++;
				continue;
			}
			ESRIShape shape = (ESRIShape)shapes.get(k);
			if( shape.getType()==0 )continue;
			shape.draw(g, rect, wrap);
		}
		g.setColor(Color.white);
		for( int k=0 ; k<rows.length ; k++) {
			ESRIShape shape = (ESRIShape)shapes.get(rows[k]);
			if( shape.getType()==0 )continue;
			shape.draw(g, rect, wrap);
		}
	}
	public String toString() {
		return filename;
	}
//
// methods implementing TreeNode
//
	public TreeNode getChildAt(int childIndex) {
		return (TreeNode)children.get(childIndex);
	}
	public int getChildCount() {
		return children.size();
	}
	public TreeNode getParent() {
		return parent;
	}
	public int getIndex(TreeNode node) {
		return children.indexOf( node );
	}
	public boolean getAllowsChildren() {
		return true;
	}
	public boolean isLeaf() {
		return getChildCount()==0;
	}
	public Enumeration children() {
		return children.elements();
	}
	public static void main(String[] args) {
		javax.swing.JFileChooser c = new javax.swing.JFileChooser(
					System.getProperty("user.dir"));
		int ok = c.showOpenDialog(null);
		if( ok==c.CANCEL_OPTION ) System.exit(0);
		try {
			File file = c.getSelectedFile();
			String path = file.getParent();
			String name = file.getName();
			name = name.substring( 0, name.lastIndexOf(".") );
			ESRIShapeFile shape = new ESRIShapeFile( path, name);
			Vector shapes = shape.getShapes();
		//	if( shape.getType()!=1 && shape.getType()!=3 ) System.exit(0);
			DBFFile dbf = new DBFFile( path, name);
			XBTable table = new XBTable(dbf);
			JScrollPane sp = new JScrollPane(table);
			JFrame frame = new JFrame(name);
			frame.getContentPane().add(sp);
			frame.pack();
			frame.setVisible(true);
			frame.setDefaultCloseOperation( frame.EXIT_ON_CLOSE );
			for(int k=0 ; k<shapes.size() ; k++) {
				System.out.println( shapes.get(k) );
			}
		} catch(IOException ex) {
			System.out.println( ex.getMessage() );
		}
	//	System.exit(0);
	}
}
