package org.geomapapp.image;

import org.geomapapp.grid.*;
import org.geomapapp.geom.*;
import org.geomapapp.util.*;

import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;

public class PerspectiveImage extends ImageComponent 
				implements Runnable {
	Grid2D grid;
	BufferedImage map;
	Perspective3D pers;
	Rectangle bounds;
	double ve;
	double[][] xyz;
	PersTool tool;
	Grid2D.Float zBuf;
	Thread thread;
	public PerspectiveImage(Grid2D grid, PersTool tool,
			BufferedImage map) {
		setLayout(null);
		this.tool = tool;
		this.grid = grid;
		this.map = map;
		ve = 1.;
	}
	public void setGrid(Grid2D grid) {
		vec=null;
		this.grid = grid;
	}
	public Grid2D getGrid() {
		return grid;
	}
	public void setVE(double ve) {
		if( ve!=this.ve )vec=null;
		this.ve = ve;
	}
	Grid2D grd;
	public void run( Perspective3D pers, Rectangle bounds,
			Grid2D grid, BufferedImage map, double ve ) {
		if(thread!=null && thread.isAlive())return;
		setVE(ve);
		this.pers = pers;
		this.bounds = bounds;
		grd = grid;
		this.map = map;
		thread = new Thread(this);
		thread.start();
	}
	public void run() {
		render4( pers, bounds, grd, map);
		repaint();
	}
	public void paintComponent(Graphics g) {
		if(image==null) {
			Dimension d = getSize();
			Rectangle r = new Rectangle( -d.width/2, -d.height/2,
					d.width, d.height);
			render4( tool.getPerspective(), r, grid, map);
		}
		super.paintComponent(g);
	}
	XYZ[][] vec;
	void doXYZ() {
		Rectangle bounds = grid.getBounds();
		MapProjection proj = grid.getProjection();
		int width = bounds.width/4;
		int height = bounds.height/4;
		vec = new XYZ[height][width];
		for( int y=0 ; y<height ; y++) {
			int yy = y*4+bounds.y;;
			for(int x=0 ; x<width ; x++) {
				int xx = x*4+bounds.x;
				double z = grid.valueAt(xx,yy);
				if( Double.isNaN(z) ) {
					vec[y][x]=null;
					continue;
				}
				Point2D pt = proj.getRefXY(
					new Point(xx,yy));
				GCPoint p = new GCPoint(
					pt.getX(), pt.getY(), z*ve);
				vec[y][x] = p.getXYZ();
			}
		}
	}
	public void render4( Perspective3D pers, Rectangle bounds,
			Grid2D grid, BufferedImage map ) {
		this.map = map;
		width = bounds.width;
		height = bounds.height;
		if( grid != this.grid) {
			this.grid = grid;
			vec=null;
		}
		if(vec==null) doXYZ();
		if( vec.length<2 || vec[0].length<2 )return;
		this.pers = pers;
		this.bounds = bounds;
		image = new BufferedImage(bounds.width,
					bounds.height,
					BufferedImage.TYPE_INT_RGB);
		zBuf = new Grid2D.Float( 
			new Rectangle(0,0,bounds.width, bounds.height), 
			null);
		xyz = new double[3][3];
		for( int y=0 ; y<vec.length-1 ; y++) {
			for( int x=0 ; x<vec[0].length-1 ; x++) {
				int n=0;
				XYZ v = pers.forward(vec[y][x]);
				if( v!=null ) {
					xyz[n] = new double[] {
						(v.x-bounds.x), 
						(v.y-bounds.y),
						v.z }; 
					n++;
				}
				v = pers.forward(vec[y][x+1]);
				if( v!=null ) {
					xyz[n] = new double[] {
						(v.x-bounds.x), 
						(v.y-bounds.y),
						v.z }; 
					n++;
				}
				if( n==0 )continue;
				v = pers.forward(vec[y+1][x+1]);
				if( v!=null ) {
					xyz[n] = new double[] {
						(v.x-bounds.x), 
						(v.y-bounds.y),
						v.z }; 
					n++;
				}
				if( n<2 )continue;
				int rgb = map.getRGB(x*4+1, y*4+1);
				if( n==3 ) {
					fill( rgb, zBuf );
					xyz[1] = xyz[2];
					n = 2;
				}
				v = pers.forward(vec[y+1][x]);
				if( v!=null ) {
					xyz[n] = new double[] {
						(v.x-bounds.x), 
						(v.y-bounds.y),
						v.z }; 
					n++;
				}
				if( n==3 ) fill(rgb, zBuf);
			}
		}
	}
	public void render( Perspective3D pers, Rectangle bounds,
			Grid2D grid, BufferedImage map ) {
		width = bounds.width;
		height = bounds.height;
		this.map = map;
		this.grid = grid;
		this.pers = pers;
		this.bounds = bounds;
		image = new BufferedImage(bounds.width,
					bounds.height,
					BufferedImage.TYPE_INT_RGB);
		Grid2D.Float zBuf = new Grid2D.Float( 
			new Rectangle(0,0,bounds.width,bounds.height), 
			null);
		Rectangle rect = grid.getBounds();
		MapProjection proj = grid.getProjection();
		xyz = new double[3][3];
		for( int y=0 ; y<rect.height-1 ; y++) {
			int yy = y+rect.y;
			for( int x=0 ; x<rect.width-1 ; x++) {
				int xx = x+rect.x;
				int n=0;
				double z = grid.valueAt(xx,yy);
				if( !Double.isNaN(z) ) {
					Point2D pt = proj.getRefXY(
						new Point(xx,yy));
					GCPoint p = new GCPoint(
						pt.getX(), pt.getY(), z*ve);
					XYZ v = pers.forward( p.getXYZ() );
					if( v!=null ) {
						xyz[n] = new double[] {
							(v.x-bounds.x), 
							(v.y-bounds.y),
							v.z }; 
						n++;
					}
				}
				z = grid.valueAt(xx+1,yy);
				if( !Double.isNaN(z) ) {
					Point2D pt = proj.getRefXY(
						new Point(xx+1,yy));
					GCPoint p = new GCPoint(
						pt.getX(), pt.getY(), z*ve);
					XYZ v = pers.forward( p.getXYZ() );
					if( v!=null ) {
						xyz[n] = new double[] {
							(v.x-bounds.x), 
							(v.y-bounds.y),
							v.z }; 
						n++;
					}
				}
				if( n==0 )continue;
				z = grid.valueAt(xx+1,yy+1);
				if( !Double.isNaN(z) ) {
					Point2D pt = proj.getRefXY(
						new Point(xx+1,yy+1));
					GCPoint p = new GCPoint(
						pt.getX(), pt.getY(), z*ve);
					XYZ v = pers.forward( p.getXYZ() );
					if( v!=null ) {
						xyz[n] = new double[] {
							(v.x-bounds.x), 
							(v.y-bounds.y),
							v.z }; 
						n++;
					}
				}
				if( n<2 )continue;
				int rgb = map.getRGB(x, y);
				if( n==3 ) {
					fill( rgb, zBuf );
					xyz[1] = xyz[2];
					n = 2;
				}
				z = grid.valueAt(xx,yy+1);
				if( !Double.isNaN(z) ) {
					Point2D pt = proj.getRefXY(
						new Point(xx,yy+1));
					GCPoint p = new GCPoint(
						pt.getX(), pt.getY(), z*ve);
					XYZ v = pers.forward( p.getXYZ() );
					if( v!=null ) {
						xyz[n] = new double[] {
							(v.x-bounds.x), 
							(v.y-bounds.y),
							v.z }; 
						n++;
					}
				}
				if( n==3 ) fill(rgb, zBuf);
			}
		}
	}
	void fill(int rgb, Grid2D.Float zBuf) {
		if( !initTriangle() ) return;
		boolean inside=false;
		for( int k=0 ; k<3 ; k++) {
			if( xyz[k][0]<0 ||xyz[k][0]>bounds.width)continue;
			if( xyz[k][1]<0 ||xyz[k][1]>bounds.height)continue;
			inside = true;
			break;
		}
		if( !inside ) return;
		int[][] segs = PolygonFill.fill(xyz);
		for( int k=0 ; k<segs.length ; k++) {
			int iy = segs[k][0];
			if( iy<0||iy>=bounds.height )continue;
			int x1 = (int)Math.max(0,segs[k][1]);
			int x2 = (int)Math.min(bounds.width,segs[k][2]);
			for( int ix=x1 ; ix<x2 ; ix++) {
				float dist = (float)getDist(ix, iy);
				float z = zBuf.floatValue(ix, iy);
				if( Float.isNaN(z) || z>dist ) {
					zBuf.setValue(ix, iy, dist);
					image.setRGB(ix, iy, rgb);
				}
			}
		}
	}
	double a1, a2;
	boolean initTriangle() {
		double dx1 = xyz[1][0]-xyz[0][0];
		double dy1 = xyz[1][1]-xyz[0][1];
		double dz1 = xyz[1][2]-xyz[0][2];
		double dx2 = xyz[2][0]-xyz[0][0];
		double dy2 = xyz[2][1]-xyz[0][1];
		double dz2 = xyz[2][2]-xyz[0][2];
		double den = dx1*dy2 - dx2*dy1;
		if( den==0f ) return false;
		a1 = (dz1*dy2 - dz2*dy1) / den;
		a2 = -(dz1*dx2 - dz2*dx1) / den;
		return true;
	}
	double getDist(int x, int y) {
		return xyz[0][2] 
			+ a1*((double)x-xyz[0][0]) + 
			+ a2*((double)y-xyz[0][1]);
	}
}
