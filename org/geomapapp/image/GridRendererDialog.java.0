package org.geomapapp.image;

import org.geomapapp.grid.*;
import org.geomapapp.util.*;

import java.beans.*;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;

public class GridRendererDialog extends JPanel {
	GridRenderer renderer;
	Grid2DOverlay grid;
	JDialog dialog;
	SunTool sun;
	VETool ve;
	Pallette landP;
	Pallette oceanP;
	Pallette defaultP;
	Histogram defaultH;
	Histogram oceanH;
	Histogram landH;
	JComboBox pallettes;
	JToggleButton contourB;
	JTextField contourInterval;
	JToggleButton oceanB, landB, bothB;
	JToggleButton continuousB, discreteB;
	JTextField colorInterval;
	ColorHistogram scaler;
	PropertyChangeListener propL;
	public GridRendererDialog(Grid2DOverlay grid) {
		super( new BorderLayout() );
		this.grid = grid;
		init();
	}
	void init() {
		defaultP  = new Pallette(Pallette.HAXBY);
		landP = new Pallette(Pallette.LAND);
		oceanP = new Pallette(Pallette.OCEAN);
		renderer = new GridRenderer(defaultP,
				1.,
				1000.,
				new org.geomapapp.geom.XYZ(-1.,1.,1.));
		renderer.setLandPallette( landP );
		renderer.setOceanPallette( oceanP );
		scaler = new ColorHistogram();
		sun = new SunTool(renderer.getSun());
		ve = new VETool(renderer.getVE());
		propL = new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				gridImage();
			}
		};

		javax.swing.border.Border border = 
			BorderFactory.createEmptyBorder(1,1,1,1);

		oceanB = new JToggleButton(
			Icons.getIcon(Icons.OCEAN, false),
			true);
		oceanB.setSelectedIcon(Icons.getIcon(Icons.OCEAN, true));
		oceanB.setBorder( border );

		landB = new JToggleButton(Icons.getIcon(
					Icons.LAND, false));
		landB.setSelectedIcon(Icons.getIcon(Icons.LAND, true));
		landB.setBorder( border );
		landB.addActionListener( new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
			//	ocean();
			}
		});

		ButtonGroup group = new ButtonGroup();
		group.add(oceanB);
		group.add(landB);

		JButton normalize = new JButton(Icons.getIcon(Icons.NORMALIZE, false));
		normalize.setPressedIcon(Icons.getIcon(Icons.NORMALIZE, true));
		normalize.setBorder( border );
		normalize.addActionListener( new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				normalize();
			}
		});

		continuousB = new JToggleButton(
				Icons.getIcon(Icons.CONTINOUS, false));
		continuousB.setSelectedIcon( Icons.getIcon(Icons.CONTINOUS, true));
		continuousB.setSelected( true);
		continuousB.setBorder( border );

		discreteB = new JToggleButton(
				Icons.getIcon(Icons.CONTINOUS, false));
		discreteB.setSelectedIcon( Icons.getIcon(Icons.CONTINOUS, true));
		discreteB.setBorder( border );

		colorInterval = new JTextField("1000");

		group = new ButtonGroup();
		group.add( continuousB );
		group.add( discreteB );

		contourB = new JToggleButton(Icons.getIcon(Icons.CONTOUR, false));
		contourB.setSelectedIcon(Icons.getIcon(Icons.CONTOUR, true));
		contourB.setBorder( border );
		contourB.addActionListener( new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				contour();
			}
		});
		contourInterval = new JTextField("1000");

		tools = new JPanel( new GridLayout(1,0));
		Box box = Box.createHorizontalBox();
		Component strut = box.createHorizontalStrut(4);
		box.add(normalize);
		box.add( strut );
		box.add(oceanB);
		box.add(landB);
		box.add( strut );
		box.add( continuousB );
		box.add( discreteB );
		box.add( colorInterval );
		box.add( strut );
		box.add(contourB);
		box.add(contourInterval);
		tools.add(box);

		pallettes = new JComboBox();
		for( int k=0 ; k<Pallette.resources.length ; k++) {
			pallettes.addItem( new Pallette(k) );
		}
		box.add( pallettes );
		pallettes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				changePallette( pallettes.getSelectedIndex() );
			}
		});

		scaler.addPropertyChangeListener( propL );
		sun.addPropertyChangeListener( propL );
		ve.addPropertyChangeListener( propL );
		initDialog();
		setNewGrid();
	}
	public void gridChanged() {
		Histogram histo = new Histogram(grid.getGrid(), 200);
		scaler.setHist( histo);
	}
	void initDialog() {
		dialog = new JDialog( 
			(JFrame)grid.getMap().getTopLevelAncestor(), 
			"Modify Color Scale");
		add(scaler);
		add(scaler.getTools(), "North");
		JPanel p = new JPanel( new GridLayout(0,1) );
		SimpleBorder sb = new SimpleBorder();
		sun.setBorder( BorderFactory.createCompoundBorder(
			BorderFactory.createTitledBorder("Sun"),
			sb));
		ve.setBorder( BorderFactory.createCompoundBorder(
			BorderFactory.createTitledBorder("V.E."),
			sb));
		p.add(sun);
		p.add(ve);
		add(p, "East");
		add(scaler.getPalletteTool(), "South");
		dialog.getContentPane().add(this);
		dialog.pack();
	}
	void gridImage() {
		renderer.setPallette( scaler.getPallette());
		renderer.setSun(sun.getSun());
		renderer.setVE( ve.getVE());
		BufferedImage image = renderer.gridImage( grid.getGrid() );
		double scale = grid.getScale();
		double[] offsets = grid.getOffsets();
		grid.setImage(image, offsets[0], offsets[1], scale);
		grid.getMap().repaint();
	}
	public void showDialog() {
		dialog.show();
	}
}
